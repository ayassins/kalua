#!/bin/sh /etc/rc.common
#
# needs in BASE="/openwrt/trunk/package/base-files/files/etc/init.d"
# $BASE/apply_profile
# $BASE/apply_profile.code
# $BASE/apply_profile.definitions
# $BASE/apply_profile.watch

START=98
EXTRA_COMMANDS='call services_refire'
ME='/etc/init.d/apply_profile'

boot()
{
	:
}

call()
{
	local max_try=20
	local interval=60
	local lockfile='/tmp/lockfile_apply_profile'
	local random_nodenumber default_net default_mode

	[ -e  "$lockfile" ] && return 0
	touch "$lockfile"

	# preventing the scheduler from running, see: _scheduler_allow_run()
	touch '/tmp/scheduler_allow_run'

	if [ -e '/tmp/loader' ]; then			# router is not virgin (so: re-apply config)
		. /tmp/loader

		if [ -n "$LOWMEM" ]; then
			services_stopmost
			wait_till_load_settles
		else
			logread >>/tmp/syslog.debug.txt
		fi
	else
		_log()		# an ungly fallback
		{
			shift
			printf '%s\n' "$0: $*" >/dev/console
			logger -s --  "$0: $*"
		}
	fi

	while [ $max_try -gt 0 ]; do {
		_log it $ME daemon info "[BOOT] start"
		"$ME.code" boot && break

		_log it $ME daemon info "[BOOT] executed $ME.code - but with errors, $max_try try's yet, waiting $interval secs"
		max_try=$(( max_try - 1 ))

		[ -e '/tmp/LOCKFILE_APPLY' ] || {
			pidof apply_profile.code >/dev/null || {	# interactive run/user invoked
				[ $max_try -lt 10 ] && {
					telnet_is_used || /etc/init.d/telnet restart
					/etc/init.d/dropbear restart
				}
			}
		}

		sleep $interval
	} done

	_log it $ME daemon info "[BOOT] ready - removing '$ME', showing success with led_firework"
	rm -f "$lockfile" '/tmp/scheduler_allow_run'

	# fallback if everything fails (and nobody has manually applied something)
	[ -e "$ME" -a $max_try -eq 0 ] && {
		random_nodenumber="$( _ipsystem getvar 'NODE_NUMBER' )"
		default_net='liszt28'
		default_mode='hybrid'
		_log it apply_fallback daemon alert "max_try:$max_try - apply: $default_net $default_mode '$random_nodenumber' dhcp"

		"$ME.code" $default_net $default_mode "${random_nodenumber:-99}" dhcp
	}

	rm -f "$ME"
	led_firework "avoid reboot with 'touch /tmp/NOREBOOT'"
	/etc/init.d/override_uci_vars boot
	rmmod mt7615e

	if   [ $OPENWRT_REV -gt 100000 -a $OPENWRT_REV -le 999999 ]; then
		_log remote "READY-A: apply_profile hardware: '$HARDWARE'"
		[ -e '/tmp/NOREBOOT' ] || _system crashreboot 'apply_profile'
	elif [ -z "$LOWMEM" -a $OPENWRT_REV -lt $LEDE_REV ]; then
		_log remote "READY-B: apply_profile hardware: '$HARDWARE'"
		services_refire
	else
		_log remote "READY-C: apply_profile hardware: '$HARDWARE'"
		[ -e '/tmp/NOREBOOT' ] || _system crashreboot 'apply_profile'
	fi
}

services_refire()
{
	logread >>/tmp/syslog.debug.txt

	. /tmp/loader		# in case not loaded yet
	_ rebuild 'services_refire'; unset -f _
	. /tmp/loader

	echo "$HOSTNAME" >/proc/sys/kernel/hostname

	/etc/init.d/odhcpd stop			# otherwise dnsmasq can be blocked
	_netfilter start
	/etc/init.d/override_uci_vars boot	# maybe new vars
	/etc/init.d/network restart
	_netparam check

	/etc/init.d/olsrd restart		# maybe metric has changed
	/etc/init.d/uhttpd restart

	rm -f '/tmp/scheduler_allow_run'
	_cron daemon_restart 'apply_profile'
}

services_stopmost()
{
	local daemon

	_log it $ME daemon alert "[OK] ending most daemons"

	for daemon in crond ulogd uhttpd olsrd dnsmasq; do {
		_log it $ME daemon info "ending daemon '$daemon'"
		/etc/init.d/$daemon stop
		/etc/init.d/*${daemon}* stop
	} done

	case "$( pidof dropbear )" in
		*' '*)
		;;
		*)
			killall dropbear
			wifi down
		;;
	esac
}

wait_till_load_settles()
{
	local load rest i=100

	while [ $i -gt 0 ]; do {
		read -r load rest </proc/loadavg
		i=$(( i - 1 ))

		case "$load" in
			'0.0'*|'0.1'*|'0.2'*|'0.3'*)
				break
			;;
			*)
				_log it $ME daemon info "wait for load <0.4, now: '$load'"
				sleep 30
			;;
		esac
	} done
}

led_firework()
{
	local message="$1"
	local i=0
	local led_loops=10
	local led_state

	if [ -e '/etc/diag.sh' ]; then
		. '/etc/diag.sh'

		while [ $i -lt $led_loops ]; do {
			_log it $ME daemon info "[BOOT] led_firework, loop $i/$led_loops - $message"
			for led_state in preinit failsafe 'done'; do {
				set_state "$led_state"
				sleep 1
			} done
			i=$(( i + 1 ))
		} done
	else
		sleep $(( led_loops * 3 ))
	fi
}

telnet_is_used()
{
	local pid cmdline

	for pid in $( pidof ash ); do {
		read -r cmdline <"/proc/$pid/cmdline"
		[ "$cmdline" = '/bin/ash--login' ] && break
	} done
}
