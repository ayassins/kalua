#!/bin/sh /etc/rc.common
# this script does not rely on '/tmp/loader',
# so it can be used directly on plain OpenWrt

START=15

ram_size()	# in kilobytes
{
	local line

	while read -r line; do case "$line" in MemTotal:*) set -- $line; echo "$2"; break ;; esac; done </proc/meminfo
}

zram_size()	# in megabytes, defaults to half of ramsize
{
	local cpu_cores="$1"
	local zram_size="$( uci -q get system.@system[0].zram_size_mb )"
	local ram_size="$( ram_size )"

	[ -z "$zram_size" ] && {
		# ~half of ramsize, e.g. ~6mb for 16mb-routers or ~61mb for 128mb-routers
		zram_size=$(( ram_size / 2048 ))
	}

	echo "$(( zram_size / cpu_cores ))"
}

zram_is_disabled()
{
	case "$( uci -q get system.@system[0].zram_disabled )" in
		1|on|true|yes) true ;;
		*) false ;;
	esac
}

zram_applicable()
{
	local zram_dev="$1"	# e.g. /dev/zram1

	zram_is_disabled && {
		logger -s -t zram_applicable -p daemon.notice "[OK] disabled in settings"
		return 1
	}

	grep -sq ^"$zram_dev " /proc/swaps && {
		logger -s -t zram_applicable -p daemon.notice "[OK] '$zram_dev' already active swap"
		return 1
	}

	grep -sq ^"$zram_dev " /proc/mounts && {
		logger -s -t zram_applicable -p daemon.notice "[OK] '$zram_dev' already mounted"
		return 1
	}

	[ -e "$zram_dev" ] || {
		logger -s -t zram_applicable -p daemon.crit "[ERROR] device '$zram_dev' not found"
		return 1
	}

	command -v mkswap >/dev/null || {
		logger -s -t zram_applicable -p daemon.err "[ERROR] 'mkswap' not installed"
		return 1
	}

	command -v swapon >/dev/null || {
		logger -s -t zram_applicable -p daemon.err "[ERROR] 'swapon' not installed"
		return 1
	}
}

zram_dev()
{
	local core="$1"

	echo "/dev/zram${core:-0}"
}

zram_reset()
{
	local dev="$1"
	local message="$2"
	local proc_entry="/sys/block/$( basename "$dev" )/reset"

	[ -e "$proc_entry" ] && {
		logger -s -t zram_reset -p daemon.debug "$message via $proc_entry"
		echo '1' >"$proc_entry"
	}
}

list_cpu_idx()		# e.g. 0 1 2 3
{
	local line i=0

	while [ -d "/sys/devices/system/cpu/cpu${i}" ]; do {
		echo $i
		i=$(( i + 1 ))
	} done

	test $i -eq 0 && echo "0"
}

kmodules_do()
{
	local action="$1"
	local num_devices="$2"
	local list="zsmalloc lzo_decompress lzo_compress zram"
	local kmodule list_reverse

	case "$action" in
		load)
			for kmodule in $list; do {
				grep -q ^"$kmodule " "/proc/modules" || {
					logger -s -t zram_kmodules -p daemon.debug "$action: '$kmodule'"

					if [ "$kmodule" = "zram" ]; then
						insmod "$kmodule" "num_devices=$num_devices" || \
							logger -s -t zram_kmodules -p daemon.err "$action: '$kmodule'"
						sleep 1
					else
						insmod "$kmodule" || \
							logger -s -t zram_kmodules -p daemon.err "$action: '$kmodule'"
					fi
				}
			} done
		;;
		remove)
			for kmodule in $list; do list_reverse="$kmodule $list_reverse"; done
			for kmodule in $list_reverse; do {
				grep -q ^"$kmodule " "/proc/modules" && {
					logger -s -t zram_kmodules -p daemon.debug "$action: '$kmodule'"
					rmmod "$kmodule"
				}
			} done
		;;
	esac
}

start()
{
	local zram_dev core num_devices offset list_cores zram_size

	zram_is_disabled && return 0

	list_cores="$( list_cpu_idx )"

	# http://shmilyxbq-compcache.googlecode.com/hg/README
	# if >1 cpu_core or zram0 already used, reinit kmodule with e.g. num_devices=4
	case "$list_cores" in
		0)
			num_devices=1
		;;
		*)
			for num_devices in $list_cores; do :; done
			num_devices=$(( num_devices + 1 ))
			stop
		;;
	esac

	zram_size="$( zram_size "$num_devices" )"

	for offset in 0 1 2 3; do test -d "/sys/block/zram$offset" || break; done
	kmodules_do load "$(( num_devices + offset ))"

	for core in $list_cores; do {
		for offset in 0 1 2 3; do {
			zram_dev="$( zram_dev "$(( core + offset ))" )"
			zram_applicable "$zram_dev" && break
		} done || return 1

		logger -s -t zram_start -p daemon.debug "activating '$zram_dev' for swapping ($zram_size MegaBytes)"

		zram_reset "$zram_dev" "enforcing defaults"
		echo $(( zram_size * 1024 * 1024 )) >"/sys/block/$( basename $zram_dev )/disksize"
		mkswap "$zram_dev"
		swapon -p 0 "$zram_dev" 2>/dev/null || swapon "$zram_dev"	# fallback to minimal busybox applet

		# kernel defaults to '60', the lower the less it swaps out - 0 = only swap to avoid OOM
		if [ $( ram_size ) -gt 16384 ]; then
			echo  5 >'/proc/sys/vm/swappiness'
		else
			echo 25 >'/proc/sys/vm/swappiness'
		fi
	} done
}

stop()
{
	local zram_dev
	local list_devs="$( grep ^'/dev/zram[0-9]' '/proc/swaps' | cut -d' ' -f1 )"	# e.g. /dev/zram0

	for zram_dev in $list_devs; do {
		logger -s -t zram_stop -p daemon.debug "deactivate swap $zram_dev"
		swapoff "$zram_dev"
		zram_reset "$zram_dev" "claiming memory back"
	} done

	kmodules_do remove
}
