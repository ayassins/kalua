#!/bin/sh

PERMLOG='/www/everlasting_syslog.txt'

_log_shell_is_interactive()
{
	case "$PS1" in
		*'@'*)
			# definition in interactive /etc/profile does not have it
		;;
		*)
			test -t 0	# is STDIN a TTY?
		;;
	esac
}

_log_remote()
{
	local message="$1"
	local server="${2:-$( _weblogin authserver )}"
	local url_encoded

	_log it ${funcname:-unset_funcname} daemon alert "$message"

	# FIXME! wait till authserver is valid
	# FIXME! autoadd hostname? + funcname?
	url_encoded="$( _sanitizer run "$HOSTNAME: $message" urlvalue )"

	_tool remote "$server" message "MSG=$url_encoded" >/dev/null || {
		case "$message" in
			'ready_booting')
			;;
			*)
				echo >>$SCHEDULER_NEXTRUN "_log remote '$message' $server"
			;;
		esac
	}
}

_log_sleep()		# _log sleep firmware_burn 180 step 10
{
	local subroutine_name="$1"
	local duration="$2"
#	local dummy="$3"	# "step"
	local step="${4:-1}"
	local i="$duration"
	local uptime_start="$( _system uptime sec )"
	local n do_sleep
	local prio='info'	# only show first and last message with info, other with debug

	case "$duration" in
		'networksize')
			# TODO: find a better name
			# we must take into account:
			# - how often runs the job (e.g. 15mins)
			# - how long lasts the job typically (e.g. 10 sec)
			# - how many nodes do the same (e.g. 200)
			# this means: 200 routers need 10 secs and should randomly start in the "job-window"
			# -> 2000 sec

			read -r duration <'/tmp/OLSR/ROUTE_COUNT'
		;;
	esac

	while [ $i -ge 0 ]; do {
		n=$i
		i=$(( i - step ))

		if [ $i -ge 0 ]; then
			do_sleep='true'
		else
			do_sleep=
			prio='info'
		fi

		# during high load/lowmem this can help:
		[ $(( $( _system uptime sec ) - uptime_start )) -gt $duration ] && return

		_log it "$subroutine_name" daemon $prio "[OK] sleeping $n/$duration sec"
		prio='debug'

		[ -n "$do_sleep" ] && {
			# raise counter, otherwise the checks will restart a 'hanging' cron
			_stopwatch start '/tmp/CRON_LASTCALL' global
			/bin/sleep $step
		}
	} done
}

_log_debug()
{
	local message="$1"
	local dev="${2:-${LANDEV:-${WANDEV:-eth0}}}"
	local ip_bin="/usr/sbin/ip"
	local netmsg_bin="/bin/netmsg"
	local broadcast_ip

	_system include
	message="$( _system load 1min ):$( _system ram_free ):${message}"

	[ -e '/dev/console' ] && echo "$message" >/dev/console

	return 0			# FIXME!
	[ -e "$ip_bin" ] || return 0
	[ -e "$netmsg_bin" ] || return 0

	explode $( $ip_bin address show dev "$dev" )
	broadcast_ip="$*"
	broadcast_ip=${broadcast_ip#*inet }
	broadcast_ip=${broadcast_ip#*brd }
	broadcast_ip=${broadcast_ip%% *}

	# readable from a neighbour with:
	# 	tcpdump -s 1500 -n -l -w - -i $YOURDEV port 0x1337 | strings | while read -r L; do test ${#L} -gt 5 && echo $L; done
	# or with an UDP-capable netcat via:
	# 	nc -lup 4919	//fixme!
	# or with iptables:
	#	$IPT -I INPUT -p udp --dport 4919 -j LOG --log-prefix "0x1337: "
	#	logread -f
	# or with iptables:
	#	$IPT -I INPUT -j LOG
	#	$IPT -I INPUT -p udp --dport 698 -j ACCEPT
	#	$IPT -I INPUT -p tcp --dport 22 -j ACCEPT
	#	logread -f

	# TODO: ipv6-linklocal
	if [ -z "$broadcast_ip" ]; then
		if grep -sq "$dev:" /proc/net/wireless ; then
			broadcast_ip="192.168.1.255"
			local ip="192.168.1.1/24"
		else
			broadcast_ip="10.255.255.255"
			local ip="10.0.0.1/8"
		fi

		$ip_bin link set dev "$dev" up
		$ip_bin address add "$ip" dev "$dev"
		$netmsg_bin "$broadcast_ip" "NO-IP: $message"
		$ip_bin address del "$ip" dev "$dev"
	else
		$netmsg_bin "$broadcast_ip" "$message"
	fi
}

_log_it()				# CALL: _log it my_function_name daemon info "mytext"
{
	case "$-" in
		*'x'*)
			# too much text during debugging with 'set -x'
			return 0
		;;
	esac

	[ "$3" = 'debug' -a ! -e '/tmp/DEBUG' ] && {
		# early exit when not interactive and no enforced debugmode
		_log shell_is_interactive || return 0
	}

	local FATHER_PROCESS="$0"
	local FUNCTION="$1"		# name of function, from where call was invoked
	local FACILITY="$2"		# source = kern,user,mail,daemon,syslog,lpr,news,uucp,cron,authpriv,local0-7
	local PRIO="$3"			# emerg,alert,crit,err,warning,notice,info,debug,sms	// nonstandard: sms
	local MESSAGE="$4"		# humanreadable verbose message, all is syslog-alike
	local message_sms="$5"
	local phonenumber="$6"
	local PERMLOG_RAM="$TMPDIR/everlasting_syslog.txt"
	local log_ramfree log_uptime log_date i list message_to_send username password sms_header dest text

	[ -z "$MESSAGE" ] && {		# from stdin (pipe into function)
		while read -r MESSAGE; do {
			_log it "$FUNCTION" "$FACILITY" "$PRIO" "STDIN${i}: ${MESSAGE:-stdin_was_empty}"
			i=$(( ${i:-1} + 1 ))
		} done

		return 0
	}

	case "$FUNCTION" in
		'inittab'*|'uci_commit')
			echo "$0: $FUNCTION() $MESSAGE" >/dev/console
		;;
		*)
			case "$0" in
				*'apply_profile'*)
					echo "$0: $FUNCTION() $MESSAGE" >/dev/console
				;;
			esac
		;;
	esac

	case "$FUNCTION" in
		'firmware'*)
			_log debug "${HOSTNAME:-box} $FATHER_PROCESS: $FUNCTION: $MESSAGE"
		;;
	esac

	# FIXME! maybe everlasting and log to console should work?
	[ -n "$LOWMEM" ] && {
		_log shell_is_interactive || return 0
	}

	mem_uptime_and_date()
	{
		echo "log_ramfree=${log_mem:-$( _system ram_free )}"
		echo "log_uptime=${log_uptime:-$( _system uptime sec )}"
		echo "log_date='${log_date:-$( _system date )}'"
	}

	case "$PRIO" in
		debug|emerg|alert|crit|sms)			# idea: [ $log_ramfree -lt 999999 ] && PRIO="alert"
			eval $( mem_uptime_and_date )

			[ "$PRIO" = 'sms' ] && {
				if [ -n "$phonenumber" ]; then
					list="$phonenumber"
				else
					list="$( uci -q get sms.@sms[0].admin )"
				fi

				[ -n "$list" ] && {
					username="$( uci -q get sms.@sms[0].username )"
					password="$( uci -q get sms.@sms[0].password )"
				}

				if [ -n "$message_sms" ]; then
					message_to_send="$message_sms"
					sms_header=
					local stack_funcname="$FUNCTION"
					FUNCTION=
				else
					message_to_send="$MESSAGE"
					sms_header="$( _system date humanreadable )${CONFIG_PROFILE%_*} $HOSTNAME ip:$ANYADR up:${log_uptime}s "
					FUNCTION="$FUNCTION "
				fi

				for dest in $list; do {
					_sms send $dest "${sms_header}${FUNCTION}${message_to_send}" '' $username $password
				} done

				[ -n "$stack_funcname" ] && FUNCTION="$stack_funcname"
				PRIO='alert'
			}

			[ "$PRIO" != 'debug' ] && {
####
				text="$log_date ' [up ${log_uptime}s $log_ramfree bytes free] $FATHER_PROCESS [$FACILITY.$PRIO] $FUNCTION() $MESSAGE"

				if [ $( _system flash_free ) -gt 150 ]; then
					# write to logfile in flash, which is not lost after reboot
					echo >>$PERMLOG "$text"
				else
					echo >>$PERMLOG_RAM "$text"
				fi

				MESSAGE="$( _sanitizer run "$MESSAGE" strip_newlines )"
				text="$( _sanitizer run "$text" shellsafe urlvalue )"
				echo >>"$TMPDIR/ARCHIV_MONITORING" "log=$text&time=$( _system date unixtime )"
				touch "$TMPDIR/SEND_ALIVE_FAILED"
			}
		;;
	esac

	_log shell_is_interactive && {
		eval $( mem_uptime_and_date )
		FATHER_PROCESS="TERM:$TERM $0"
		# output to STDERR
###
		echo 1>&2 "$log_date ' [up ${log_uptime}s $log_ramfree bytes free] $FATHER_PROCESS [$FACILITY.$PRIO] $FUNCTION() $MESSAGE"
	}

	[ $OPENWRT_REV -lt 41037 ] && {
		# if nobody is listening for 'logger' yet, write to file (e.g. early bootup)
		pidof procd syslogd >/dev/null || {
			eval $( mem_uptime_and_date )
###
			text="$log_date ' [up ${log_uptime}s $log_ramfree bytes free] $FACILITY.$PRIO"
			text="$text fff+ $FATHER_PROCESS $FUNCTION() $MESSAGE"
			echo >>'/tmp/messages' "$text"
		}
	}

	logger -t "kalua: $FATHER_PROCESS" -p "${FACILITY}.${PRIO}" -- "$FUNCTION() $MESSAGE"
}

_log_append_info()
{
	local location="$( _weblogin metadata_locationname )"
	local host="$( uci get system.@system[0].hostname )"
	local date="$( _system date humanreadable pretty )"

	echo "${location}->${host} @ ${date}"
}
