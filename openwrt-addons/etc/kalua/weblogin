#!/bin/sh

_weblogin_loginpage_build_cache()
{
	local funcname='weblogin_loginpage_build_cache'
	local cache="${1:-/tmp/weblogin_cached_for_overload}"

	_log it $funcname daemon info "writing '$cache'"

	if bool_true 'system.@weblogin[0].enabled'; then
		case "$( uci -q get system.@weblogin[0].auth )" in
			'password2mobile')
				_weblogin htmlout_loginpage '' '' '' '' "http://$ANYADR" '(cache)' 'mobile_mode' >"$cache"
			;;
			*)
				_weblogin htmlout_loginpage '' '' '' '' "http://$ANYADR" '(cache)' >"$cache"
			;;
		esac
	else
		_weblogin htmlout_gatepage >"$cache"
	fi
}

_weblogin_generate_prebuilt_splash_htmlfile()
{
	local option="$1"	# ram|persistent
	local funcname="weblogin_generate_prebuilt_splash_htmlfile"
	local file="weblogin_cached_for_overload"
	local hash1 hash2

	_log it $funcname daemon info "[START]"
	export QUERY_STRING="REDIRECTED=1" SCRIPT_NAME=
	/www/cgi-bin-welcome.sh >"/tmp/$file"

	[ "$option" = "persistent" ] && {
		hash1="$( _file hash "/www/$file" )"
		hash2="$( _file hash "/tmp/$file" )"
		[ "$hash1" = "$hash2" ] || {
			cp "/tmp/$file" "/www/$file"
		}
	}

	_log it $funcname daemon info "[READY]"
}

_weblogin_html_logoutpage()
{
	local funcname='weblogin_html_logoutpage'
	local ip="$REMOTE_ADDR"

	eval $( _http query_string_sanitize "$funcname" )
	_http header_mimetype_output "text/html"

	local mac="$( _net ip2mac "$ip" )"
	local validate_splashed message
	local destination="http://$WIFIADR"
	local wait=5

	if _netfilter user_probe "$mac" ; then
		validate_splashed="nein"
		_netfilter user_del "$mac" "$funcname"
		message="[OK] erfolgreich ausgeloggt"
	else
		validate_splashed="ja"
		message="[OK] sie sind schon ausgeloggt"
	fi

	cat <<EOF
<html>
<head>
<META HTTP-EQUIV="refresh" CONTENT="$wait; URL=$destination">
</head>
<body>
<h3>$message
<br>Sie werden in $wait Sekunden automatisch <a href='$destination'>auf die Loginseite</a> geleitet</h3>
<small>
<pre>
technische Details:
	IP-Adresse:	$ip
	MAC-Adresse:	$mac
	splashed?:	$validate_splashed
</pre>
</small>
</body>
</html>
EOF
}

_weblogin_splashscript()
{
	if [ -e '/usr/sbin/uhttpd' ]; then
		printf 'cgi-bin-welcome.sh'
	else
		printf 'cgi-bin-welcome'
	fi
}

_weblogin_htmlout_loginpage()				# needs: images/logo.gif|logo2.gif              + images/flag_de|en|fr.gif
{							#        images/button_login_de.gif		+ images/bgcolor.txt
	_http header_mimetype_output 'text/html'	#        /favicon.ico
	_i18n include

	local funcname='weblogin_htmlout_loginpage'
	local LANG="$( _i18n lang $1 )"
	local SHOW_RULES="$2"				# FIXME! can be 'inet_broken'
	local SHOW_PASSWORD_WRONG="$3"
	local SHOW_ACCEPT_RULES="$4"
	local LINK_BASE="$5"				# e.g. http://$WIFIADR
	local INJECT_TITLE="$6"
	local MOBILE_MODE="$7"				# show field for mobile-number instead of username/password

	case "$( uci -q get system.@weblogin[0].auth )" in
		password2mobile) MOBILE_MODE='mobile_mode' ;;
	esac

	local LANG_DIRECTION='ltr'			# fixme! left2right or right2left?
	local CODEPAGE='ISO-8859-15'			# fixme! lang <-> charset/codepage?
	local BGCOLOR LINK SLOGAN MYLANG MYLANGLIST NEXT_LANG_SUBSET_START
	local font_start font_end font_face font_color submit_button_html
	local AMP='&amp;'
	local TABINDEX=6	# is hardcoded on most points
	local SEP=':'		# was "&middot;" but lynx cannot display this 8-) and the ' looks weird, maybe use "|"?
	local LOCATION_NAME="$( _weblogin metadata_locationname "$LANG" )"

	if [ -e '/www/images/button_login_de.gif' ]; then
		submit_button_html="<INPUT TYPE='image' TABINDEX='3' SRC='${LINK_BASE}/images/button_login_de.gif' ALT='&rarr;Login'>"
	else
		submit_button_html="<INPUT TYPE='submit' TABINDEX='3' name='loginbutton' value='Login'"
	fi

	# FIXME! we need an better meta-description, e.g. Schriftzug | Bett auf Wolken ...
	local LOGO_DESCRIPTION="$( _i18n get "$LANG" site_logo ) ('$LOCATION_NAME'/$ANYADR)"

	[ -e '/www/images/font_face.txt' ] && {
		read -r font_face <'/www/images/font_face.txt'

		[ -e '/www/images/font_color.txt' ] && {
			read -r font_color <'/www/images/font_color.txt'
		}

		font_start="<font face='$font_face' color='${font_color:-#000000}'>"	# defaults to black
		font_end="</font>"
	}

	case "$LANG" in
		 da|ru|ja) NEXT_LANG_SUBSET_START="de" ; MYLANGLIST="da ru ja" ;;	# fixme! abstraction needed?
			*) NEXT_LANG_SUBSET_START="da" ; MYLANGLIST="de en fr" ;;	# fixme! distinguish forward/backward
	esac

	local LANG_CACHE_FILE="/tmp/weblogin_langcache_${LANG_DIRECTION}_${MYLANGLIST}_${INJECT_TITLE}"

	[ -n "$FORM_RULES" -o -n "$MOBILE_MODE" ] && SHOW_ACCEPT_RULES="false"
	[ "$FORM_SHOW_ACCEPT_RULES"   = "true"  ] && SHOW_ACCEPT_RULES="true"
	[ "$FORM_SHOW_PASSWORD_WRONG" = "true"  ] && SHOW_PASSWORD_WRONG="true"

	LINK="${LINK_BASE}${SCRIPT_NAME:-/$( _weblogin splashscript )}?REDIRECTED=1"
	[ "$SHOW_PASSWORD_WRONG" = "true" ] && LINK="${LINK}${AMP}FORM_SHOW_PASSWORD_WRONG=true"
	[ "$SHOW_ACCEPT_RULES"   = "true" ] && LINK="${LINK}${AMP}FORM_SHOW_ACCEPT_RULES=true"
	LINK="${LINK}${AMP}FORM_LANG"

	read -r BGCOLOR 2>/dev/null </www/images/bgcolor.txt		# fixme! defaulting to #F2F2F2 ?

	if [ -e "/www/images/logo2.gif" ]; then
		# fixme! use: _weblogin metadata slogan
		SLOGAN="<IMG SRC='${LINK_BASE}/images/logo2.gif' TITLE='Hotel-Slogan' ALT='Hotel-Slogan'>"

		local url="$( _weblogin metadata_locationname "$LANG" 'advert_url' )"
		[ -n "$url" ] && {
			local title="$( _weblogin metadata_locationname "$LANG" 'advert_title' )"
			SLOGAN="<a href='$url' title='$title'>$SLOGAN</a>"
		}

		SLOGAN="$SLOGAN<BR><BR>"
	else
		SLOGAN=
	fi

	cat <<EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
	"http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="$LANG" dir="$LANG_DIRECTION"><HEAD>
<TITLE>Weblogin $SEP Captive portal $SEP Splash screen $SEP $LOCATION_NAME $SEP ${INJECT_TITLE}</TITLE>
<META HTTP-EQUIV="cache-control" CONTENT="no-cache">
<META HTTP-EQUIV="pragma" CONTENT="no-cache">
<META HTTP-EQUIV="expires" CONTENT="0">
<META HTTP-EQUIV="content-type" CONTENT="text/html; charset=${CODEPAGE}">
<LINK REL="shortcut icon" TYPE="image/x-icon" HREF="${LINK_BASE}/favicon.ico">
</HEAD>
<BODY BGCOLOR="${BGCOLOR:=#ffffff}" TEXT="#000000"${font_color:+ LINK='$font_color' VLINK='$font_color' ALINK='$font_color'}><CENTER>
EOF

	cat "$LANG_CACHE_FILE" 2>/dev/null || {
		for MYLANG in $MYLANGLIST; do {
			printf '%s' "<A TABINDEX='$TABINDEX' HREF='$LINK=$MYLANG' HREFLANG='$MYLANG' CHARSET='$CODEPAGE' TITLE='"
			_i18n get "$MYLANG" in_my_lang							# idea: build it with tables 8-)
			printf '%s' "'><IMG SRC='${LINK_BASE}/images/flag_${MYLANG}.gif' BORDER='0' ALT='${MYLANG}' TITLE='"	# each flag is a 16x12/GIF
			_i18n get "$MYLANG" in_my_lang
			printf '%s' "'>&nbsp;${font_start}"
			_i18n get "$MYLANG" langname
			printf '%s' "${font_end}</A>&nbsp;&nbsp;"
			TABINDEX=$(( TABINDEX + 1 ))
		} done >"$LANG_CACHE_FILE"
		cat "$LANG_CACHE_FILE"
	}				# FIXME! each image has to have an 'filename.gif_dimensions' with 'X Y' pixels, to better follow standards
					# image: fits best with 220px, transparency, GIF
					# FIXME! lynx cannot display the "next" symbol, use image+alt instead!
					# FIXME! maybe group username/pass with <fieldset> + <legend>?
					# FIXME! font zusaetzlich mit CSS festlegen <span style="font-family:'Times New Roman',Times,serif">
					# FIXME! testsuite: dillo1/2, w3m, lynx, links2, IE4+, pirelli-phone + all mainstream browsers
	cat <<EOF
<A TABINDEX='10' HREF='$LINK=$NEXT_LANG_SUBSET_START' HREFLANG='$NEXT_LANG_SUBSET_START' CHARSET='$CODEPAGE' TITLE='$( _i18n get "$LANG" other_languages )'><big><b>${font_start}&raquo;${font_end}</b></big></a>
<BR><BR>${SLOGAN}<IMG SRC="${LINK_BASE}/images/logo.gif" TITLE="$LOGO_DESCRIPTION" ALT="$LOGO_DESCRIPTION"><FORM METHOD="post" ACTION="${LINK}">
<TABLE CELLSPACING="0" CELLPADDING="0" BORDER="0" width='85%' summary='forgiveme'>
<TR><TD ALIGN='CENTER'><BR><B><BIG>${font_start}$( _i18n get "$LANG" internetaccess )${font_end}</BIG></B></TD></TR>
EOF
	[ "$FORM_SHOW_RULES"	 = "true"	 ] && _weblogin htmlout_rules			$LANG
	[ "$SHOW_PASSWORD_WRONG" = "true"	 ] && _weblogin htmlout_message_wrong_logindata	$LANG
	[ "$SHOW_ACCEPT_RULES"	 = "true"	 ] && _weblogin htmlout_rules_hint		$LANG
	[ "$SHOW_RULES"		 = "inet_broken" ] && _weblogin htmlout_inet_broken		$LANG


	[ -n "$FORM_MOBILE_NUMBER" ] && {

		local mac="$( _net ip2mac "$REMOTE_ADDR" )"	# FIXME! empty mac -> deny

		[ -e /tmp/login_was_sent_to_mobilenumber_${mac:-unset} ] || {

			FORM_MOBILE_NUMBER="$( echo "$FORM_MOBILE_NUMBER" | sed 's/[^0-9]//g' )"	# fixme!
			if _sanitizer run "$FORM_MOBILE_NUMBER" mobilenumber check; then

				_weblogin htmlout_message_password_was_send $LANG

				MOBILE_MODE=							# to enforce normal username/password login page
				touch /tmp/login_was_sent_to_mobilenumber_${mac:-unset}		# fixme! delete on successful login

				local profile=1
				local devices=1
				local fuzzy=1
				local USERNAME PASSWORD

				case "$( uci -q get system.@weblogin[0].auth_credentials )" in
					simple)
						# fixme! if we don't have a local db, outsource to master
						_db user login add "$profile" "sms-$FORM_MOBILE_NUMBER" "none" "" "$devices" "" "$fuzzy"
					;;
					*)
						# fixme! if we don't have a local db, outsource to master
						_db user login add "$profile" "sms-$FORM_MOBILE_NUMBER" "" "" "$devices" "" "$fuzzy"
					;;
				esac

				_db user login index_gen last 1
				eval $( _db user login show last "USERNAME PASSWORD" )

				case "$( uci -q get system.@weblogin[0].auth_credentials )" in
					simple)
						case "$CONFIG_PROFILE" in
							shankar*)
								_log it $funcname daemon sms \
									"login from $FORM_MOBILE_NUMBER" \
									"Wi-Cloud Credentials: $PASSWORD - Have a nice day!" \
									"$FORM_MOBILE_NUMBER" \
									"force"
							;;
							*)
								_log it $funcname daemon sms \
									"login from $FORM_MOBILE_NUMBER" \
									"$( _i18n get "$LANG" your_credentials ): $PASSWORD - $( _i18n get "$LANG" wishing_a_nice_stay )" \
									"$FORM_MOBILE_NUMBER" \
									"force"
							;;
						esac
					;;
					*)
						_log it $funcname daemon sms \
							"login from $FORM_MOBILE_NUMBER" \
							"$( _i18n get "$LANG" your_username_and_password ): $USERNAME/$PASSWORD - $( _i18n get "$LANG" wishing_a_nice_stay )" \
							"$FORM_MOBILE_NUMBER" \
							"force"
					;;
				esac
			else
				_weblogin htmlout_message_wrong_mobile_number $LANG
			fi
		}
	}


	cat <<EOF
<TR><TD ALIGN="CENTER"><BR><TABLE CELLSPACING="0" CELLPADDING="2" BORDER="0" summary='forgiveme'>
EOF

	case "$MOBILE_MODE" in
		mobile_mode)
			local mac="$( _net ip2mac $REMOTE_ADDR )"
			[ -e /tmp/login_was_sent_to_mobilenumber_${mac:-unset} ] && MOBILE_MODE=
		;;
	esac

	case "$MOBILE_MODE" in
		mobile_mode)
			cat <<EOF
<TR><TD ALIGN="RIGHT"><label for='mobile_number'>$( _i18n get "$LANG" mobile_number ):&nbsp;</label><INPUT TABINDEX="1" ID="mobile_number" TYPE="text" SIZE="20" MAXLENGTH="30" NAME="FORM_MOBILE_NUMBER" VALUE="$( _i18n get "$LANG" mobile_number_howto )"></TD></TR>
<TR><TD ALIGN="CENTER"><BR>$submit_button_html</TD></TR>
<TR><TD ALIGN="CENTER"><a HREF="${LINK}=${LANG}${AMP}FORM_SHOW_RULES=true" TITLE="$( _i18n get "$LANG" tip_contract )">$( _i18n get "$LANG" accept_terms2 )</a></TD></TR>
EOF
		;;
		*)
			local i18n_username i18n_password auth_type hidden_adlink hidden_url hidden_title

			hidden_url='http://bittorf-wireless.de/en/node/66'
			hidden_title='comprehensive wireless internet access throughout the entire hotel complex using mesh technology'
			hidden_adlink="<a hreflang='en' href='$hidden_url' title='$hidden_title'>.</a>"

			if _weblogin device_or_customer_needs_admin_interaction "$REMOTE_ADDR"; then
				_weblogin htmlout_needs_admin_interaction "$LANG"
			else
				auth_type="$( uci -q get system.@weblogin[0].auth_type )"

				case "$auth_type" in
					'roomnumber'|'roomnumber2')	# 2 = roomnumber + password
						i18n_username="$( _i18n get "$LANG" roomnumber )"
						i18n_password="$( _i18n get "$LANG" password )"
					;;
					*)
						i18n_username="$( _i18n get "$LANG" username )"
						i18n_password="$( _i18n get "$LANG" password )"
					;;
				esac

				case "$auth_type" in
					'none')
						# no credentials are needed, just "click away"
						local mac="$( _net ip2mac $REMOTE_ADDR )"
						_log it $funcname daemon info "allowing access for ip/mac: $REMOTE_ADDR/$mac"
						[ -n "$mac" ] && nf_user 'mark_known' "$mac"
					;;
					'roomnumber')
						cat <<EOF
<TR><TD ALIGN="CENTER"><label for='username'>${font_start}${i18n_username}:${font_end}&nbsp;</label><INPUT TABINDEX="1" ID="username" TYPE="text" SIZE="10" MAXLENGTH="30" NAME="FORM_USER" VALUE="$FORM_USER"></TD></TR>
EOF
					;;
					'userpass'|*)
						case "$( uci -q get system.@weblogin[0].auth_credentials )" in
							simple)
								i18n_password="$( _i18n get "$LANG" your_credentials )"
								cat <<EOF
<TR><TD ALIGN="RIGHT"><label for='password'>${font_start}${i18n_password}:${font_end}&nbsp;</label><INPUT TABINDEX="2" ID="password" TYPE="password" SIZE="10" MAXLENGTH="30" NAME="FORM_PASS"></TD></TR></TABLE></TD></TR>
EOF
							;;
							*)
								cat <<EOF
<TR><TD ALIGN="RIGHT"><label for='username'>${font_start}${i18n_username}:${font_end}&nbsp;</label><INPUT TABINDEX="1" ID="username" TYPE="text" SIZE="10" MAXLENGTH="30" NAME="FORM_USER" VALUE="$FORM_USER"></TD></TR>
<TR><TD ALIGN="RIGHT"><label for='password'>${font_start}${i18n_password}:${font_end}&nbsp;</label><INPUT TABINDEX="2" ID="password" TYPE="password" SIZE="10" MAXLENGTH="30" NAME="FORM_PASS"></TD></TR></TABLE></TD></TR>
EOF
							;;
						esac
					;;
				esac

				cat <<EOF
<TR><TD ALIGN="CENTER"><BR><INPUT TYPE="checkbox" ID="accept_terms" TABINDEX="4" NAME="FORM_RULES" checked><label for='accept_terms'>&nbsp;${font_start}$( _i18n get "$LANG" accept_terms1 )${font_end} <A TABINDEX="5" HREF="${LINK}=${LANG}${AMP}FORM_SHOW_RULES=$( if [ "$FORM_SHOW_RULES" = "true" ]; then printf 'false'; else printf 'true'; fi )" TITLE="$( _i18n get "$LANG" tip_contract )">${font_start}$( _i18n get "$LANG" accept_terms2 )${font_end}</A>${hidden_adlink}</label></TD></TR>
<TR><TD ALIGN="CENTER"><BR>$submit_button_html</TD></TR>
EOF
			fi
		;;
	esac

	if   [ -e '/www/advertisement.js' ]; then
		printf '%s' "<tr><td align='middle'><br><br>&nbsp;"
		sed "s/INSERT_RANDOM_NUMBER_HERE/$( _math random_integer 1 99999 )/g" "/www/advertisement.js"
		printf '%s' "</td></tr>"
	elif [ -e '/www/images/logo3.gif' ]; then
		SLOGAN="<img src='${LINK_BASE}/images/logo3.gif'>"

		local url="$( _weblogin metadata_locationname "$LANG" 'advert_url' )"
		[ -n "$url" ] && {
			local title="$( _weblogin metadata_locationname "$LANG" 'advert_title' )"
			SLOGAN="<a href='$url' title='$title'>$SLOGAN</a>"
		}

		printf '%s' "<tr><td align='middle'><br><br>&nbsp;"
		printf '%s' "$SLOGAN"
		printf '%s' "</td></tr>"
	fi

	echo '</TABLE></FORM></CENTER></BODY></HTML>'
}

_weblogin_metadata_locationname()
{
	local LANG="$( _i18n lang $1 )"
	local option="$2"
	local META="/www/images/weblogin_rules_${LANG}_meta"

	[ -e "$META" ] || {
		LANG="$( _i18n lang default )"
		META="/www/images/weblogin_rules_${LANG}_meta"
	}

	[ -e "$META" ] && eval "$( sed 's/^/local /' $META )"

	case "$option" in
		advert_url)
			echo "$ADVERT_URL"
		;;
		advert_title)
			echo "$ADVERT_TITLE"
		;;
		walled_garden)
			echo "$WALLED_GARDEN"
		;;
		*)
			echo "${HOTELNAME:-Internet}"
		;;
	esac
}

_weblogin_htmlout_rules()
{
	local lang="$( _i18n lang $1 )"
	local file="/www/images/weblogin_rules_${lang}.txt"		# FIXME! must be coded in ISO_8859-1
	local meta="/www/images/weblogin_rules_${lang}_meta"
	local color_lightblue='#b0c4de'
	local hidden_link="<a title='Administrationszugang' href='../index.html'>\&middot;</a><a title='Benutzerverwaltung' href='../cgi-bin/userdb'>"

	if [ -e '/www/images/weblogin_rules_SPECIAL.txt' ]; then
		# override all languages, e.g. CVJM/Leipzig
		file='/www/images/weblogin_rules_SPECIAL.txt'
	else
		[ -e "$file" ] || {
			lang="$( _i18n lang default )"
			file="/www/images/weblogin_rules_${lang}.txt"
			meta="/www/images/weblogin_rules_${lang}_meta"
		}
	fi

	# suck in vars, but 'local' only
	eval "$( sed 's/^/local /' "$meta" )"	# e.g. HOTELNAME=xy

	printf '%s' "<TR BGCOLOR='$color_lightblue'><TD ALIGN='LEFT'><BR>"

	sed	-e '/^#/d' \
		-e "s#\${HOTELNAME}#<nobr>$HOTELNAME</nobr>#g" \
		-e "s#\${BEZAHLMODELL}#$BEZAHLMODELL#g" \
		-e "s#\${SPEED}#$SPEED#g" \
		-e "s#\${TECHNIK}#$TECHNIK#g" \
		-e "s#\${WARTUNGSFENSTER}#$WARTUNGSFENSTER#g" \
		-e "s#\${SPEICHERDAUER}#$SPEICHERDAUER#g" \
		-e "s#\${ERSTELLUNGSZEIT}#$ERSTELLUNGSZEIT#g" \
		-e "s#\${SIGNATUR}#${hidden_link}$SIGNATUR</a>#g" \
		-e 's#^[0-9]\.[0-9]#<br><br><b>&</b>#' \
		-e 's#^[0-9]\. .*#<h3>&</h3>#' \
		-e 's#^  $#<br><br>#' "$file"

	# TODO: convert on server into HTML-entities:
	# egrave eacute Eacute ecirc agrave acirc ocirc ugrave sect sect ouml uuml auml szlig

	printf '<BR><BR></TD></TR>'
}

_weblogin_htmlout_rules_hint ()
{
	local LANG="$1"

	printf '%s' "<TR BGCOLOR='#E0ACAC'><TD ALIGN='CENTER'><BR><B>&nbsp;$( _i18n get "$LANG" accept_rules )&nbsp;</B><BR><BR></TD></TR>"
}

_weblogin_htmlout_message_password_was_send ()
{
	local LANG="$1"

	printf '%s' "<TR BGCOLOR='lime'><TD ALIGN='CENTER'><BR><B>&nbsp;$( _i18n get "$LANG" password_was_send )&nbsp;</B><BR><BR></TD></TR>"
}

_weblogin_htmlout_message_wrong_mobile_number ()
{
	local LANG="$1"

	printf '%s' "<TR BGCOLOR='#E0ACAC'><TD ALIGN='CENTER'><BR><B>&nbsp;$( _i18n get "$LANG" wrong_mobile_number )&nbsp;</B><BR><BR></TD></TR>"
}

_weblogin_htmlout_needs_admin_interaction()
{
	local LANG="$1"
	local i18n_hint

	case "$CONFIG_PROFILE" in
		cvjm*)
			i18n_hint="$( _i18n get "$LANG" no_internet_allowed )"
		;;
		*)
			i18n_hint="$( _i18n get "$LANG" needs_admin_interaction )"
		;;
	esac

	printf '%s' "<TR BGCOLOR='#E0ACAC'><TD ALIGN='CENTER'><BR><B>&nbsp;${i18n_hint}&nbsp;</B><BR><BR></TD></TR>"
}

_weblogin_htmlout_message_wrong_logindata()
{
	local lang="$1"
	local i18n_hint

	case "$CONFIG_PROFILE" in
		spbansin*)
			i18n_hint="$( _i18n get "$lang" wrong_room_number )"
		;;
		*)
			i18n_hint="$( _i18n get "$lang" wrong_logindata )"
		;;
	esac

	_db exists_but_not_restored_yet && {
		[ -e '/tmp/FREE' ] || {
			touch '/tmp/FREE'
			touch '/tmp/FREE.wrong_logindata'	# we autoremove if next good db-auth was
		}
	}

	_log remote "wrong_logindata: ip: '$REMOTE_ADDR'"
	printf '%s' "<TR BGCOLOR='#E0ACAC'><TD ALIGN='CENTER'><BR><B>&nbsp;${i18n_hint}<br>"
	printf '%s' "(debuginfo&nbsp;$NODENUMBER:$ANYADR:$REMOTE_ADDR)</B><BR><BR></TD></TR>"
}

_weblogin_htmlout_gatepage()		# the index-page, if weblogin is disabled
{
	_http header_mimetype_output 'text/html'

	cat <<EOF
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>weimarnetz: Netzknoten $NODENUMBER ("$HOSTNAME")</title>
<style type="text/css">
h1 { margin:0; padding:3pt; background:#333; color:white; font-size:15px; border-bottom:#333 1px solid;}
li { font-size:14px; font-weight:700; padding:12pt 0pt 0pt 10pt;list-style:none; height:30px; border-bottom:#333 1px solid; background:#fff}
a{text-decoration:none; color:222;}
li:hover{background:#3399FF; }
li:hover a{color:#fff}
ul {margin:0;padding:0; width: 100%;}
body {font-family:sans-serif; width:100%; height:100%; background-color:#333; padding:0; margin:0; color:black;}
</style>
</head>
<body>
<h1>Bitte ausw&auml;hlen</h1>
<ul>
<li><a href="http://${WIFIADR}${SCRIPT_NAME:-/$( _weblogin splashscript )}?REDIRECTED=1">weiter ins Internet</a></li>
<li><a href="http://vikingosegundo.de/mw/">Experiment "hoopy-froods.net"</a></li>
<li><a href="http://$WIFIADR/cgi-bin-index.html">Startseite dieses Netzknotens</a></li>
</ul>
</body>
</html>
EOF
}

_weblogin_htmlout_inet_broken()
{
	local funcname='weblogin_htmlout_inet_broken'
	local lang="$1"

	[ -n "$REMOTE_ADDR" -a "$REMOTE_ADDR" != '127.0.0.1' ] && _log it $funcname daemon alert 'during user action'
	printf '%s' "<TR BGCOLOR='#E0ACAC'><TD ALIGN='CENTER'><BR><B>&nbsp;$( _i18n get "$lang" inet_broken )&nbsp;</B><BR><BR></TD></TR>"
}

_weblogin_device_or_customer_needs_admin_interaction()
{
	local ip="$1"
	local cgi_role

	# public or <empty>
	_net ip4_is_private "$ip" || return 1

	# not if another olsr-neigh
	[ -e "/tmp/OLSR/is_my_neigh-$ip" ] && return 1

	bool_true 'system.@weblogin[0].allow_cgi_roles' && {
		# see /www/cgi-bin-tool.sh
		[ -e "$TMPDIR/cgi_role_$ip" ] && {
			read -r cgi_role <"$TMPDIR/cgi_role_$ip"
			[ "$cgi_role" = 'keininternet' ] && return 0
		}
	}

	[ $( _system uptime sec ) -lt 300 ] && return 1

	bool_true 'system.@weblogin[0].blocked'
}

_weblogin_login_check()			# FIXME! send HOSTNAME?
{					# FIXME! answer must be a challenge/response:	// prevent replay attacks!
	local funcname='weblogin_login_check'
	local USER="$1"			#        1. send hash of user/pass
	local PASS="$2"			#        2. server answers with hash_of(1+my_secret_sshid) + auth=true/false
	local MAC="$3"			#        3. we calc same hash and compare
	local SIGNAL="$4"
	local LANG="$( _i18n lang $5 )"
	local KEYWORD="$6"		# can be 'plaintext'
	local ip="$REMOTE_ADDR"
	local free HASH ANSWER dbsize nexthop logprio fixed_password

	case "$( uci -q get system.@weblogin[0].auth_credentials )" in
		'simple')
		;;
		*)
			USER="${USER:-$MAC}"		# check for mac-enabled devices, which gets a splash-screen
		;;
	esac

	# autorepair e.g.
	# user='username pass' pass='pass' or
	# user 'username pass' and pass=''
	case "$USER" in
		*' '*)
			explode $USER
			if   [ "$2" = "${PASS:-notset}" ]; then
				USER="$1"
				_log it $funcname daemon info "repaired1: USER='$USER' PASS='$PASS'"
			elif [ -n "$2" -a -z "$PASS" ]; then
				USER="$1"
				PASS="$2"
				_log it $funcname daemon info "repaired2: USER='$USER' PASS='$PASS'"
			fi
		;;
	esac

	strip_leading_and_trailing_tabs_and_spaces()
	{
		local string="$1"

		echo "$string" | sed 's/^[ 	]*//;s/[ 	]*$//'
	}

	has_leading_or_trailing_tabs_or_spaces()
	{
		local string="$1"

		case "$string" in
			' '*|*' ')		# spaces
				return 0
			;;
			'	'*|*'	')	# tabs
				return 0
			;;
			*)
				return 1
			;;
		esac
	}

	has_leading_or_trailing_tabs_or_spaces "$USER" && {
		_log it $funcname daemon info "string tabs/spaces: username '$USER'"
		USER="$( strip_leading_and_trailing_tabs_and_spaces "$USER" )"
	}

	has_leading_or_trailing_tabs_or_spaces "$PASS" && {
		_log it $funcname daemon info "string tabs/spaces: password '$PASS'"
		PASS="$( strip_leading_and_trailing_tabs_and_spaces "$PASS" )"
	}

	[ -n "$KEYWORD" ] && {
		KEYWORD="${USER}+${PASS}"
	}

	HASH="$( _db hash "${USER}${PASS}" )"

	mac_is_from_lan()
	{
		local funcname='mac_is_from_lan'
		local mac="$1"
		local ip dev

		[ -z "$mac" ] && return 1
		ip="$(  _net mac2ip "$mac" )"
		dev="$( _net ip2dev "$ip"  )"

		case "${dev:-empty_dev}" in
			"$LANDEV")
				_log it $funcname daemon info "mac $mac is from LAN"
				return 0
			;;
			*)
				return 1
			;;
		esac
	}

	if   bool_true 'system.@weblogin[0].freelan' && mac_is_from_lan "$MAC"; then
		_log it $funcname daemon info '[OK] is from LAN'
		free=1
	elif fixed_password="$( uci -q get system.@weblogin[0].fixed_password )"; then
		case "${USER}${PASS}" in
			"${MAC}${HOSTNAME}"|"$MAC")
				_log it $funcname daemon info "[ERR] fixed_password invalid/mac/hostname"
			;;
			"$fixed_password")
				_log it $funcname daemon info '[OK] fixed_password matches'
				free=1
			;;
			*)
				if [ "$MAC" = "$USER" -a "$PASS" = "$fixed_password" ]; then
					_log it $funcname daemon info '[OK] fixed_password_only matches'
					free=1
				else
					_log it $funcname daemon alert "[ERR] fixed_password differs: $USER/$PASS"
				fi
			;;
		esac
	elif grep -sq "$HASH" "/tmp/USERDB_COPY"; then
		free=1

		[ -e '/tmp/FREE.wrong_logindata' ] && {
			rm -f '/tmp/FREE.wrong_logindata' '/tmp/FREE'
		}
	else
		case "$CONFIG_PROFILE" in
			spbansin*)
				is_valid_booking_number()	# 1234-2011 |  12345-2011
				{
					local number="$1"
					local code year

					case "$number" in
						*-*)
							code="$( echo "$number" | cut -d'-' -f1 )"
							year="$( echo "$number" | cut -d'-' -f2 )"

							[ ${#code} -eq 4 -o ${#code} -eq 5 ] && {

								year_now="$( date +%Y )"

								if [ "$year" = "$year_now" ]; then
									return 0
								else
									[ ${#year} -eq 4 ] && {
										[ "$( date +%m )" = "01" ] && {
											[ "$year" = $(( year_now - 1 )) ] && {
												# in january 2012 we can enter 2011
												return 0
											}
										}	
									}
								fi
							}
						;;
					esac

					return 1
				}

				is_valid_room_number()
				{
					case "$1" in
						100|101|102|103|104|105|106|107|108|109|110|111|112);;
						200|201|202|203|204|205|206|207|208|209|210|211|212);;
						300|301|302|303|304|305|306|307|308|309|310|311|312);;
						400|401|402|403|404|405|406|407|408|409|410|411|412);;
						# 5xx not under management
						600|601|602|603|604|605|606|607|608|609|610|611|612);;
						700|701|702|703|704|705|706|707|708|709|710|711|712);;
						800|801|802|803|804|805|806|807|808|809|810|811|812);;
						900|901|902|903|904|905|906|907|908|909|910|911|912);;
						1000|1001|1002|1003|1004|1005|1006|1007|1008|1009|1010|1011|1012);;
						1100|1101|1102|1103|1104|1105|1106|1107|1108|1109|1110|1111|1112);;
						1200|1201|1202|1203|1204|1205|1206|1207|1208|1209|1210|1211|1212);;
						*) false ;;
					esac
				}

				is_valid()
				{
					is_valid_room_number    "$1" || return 1
					# is_valid_booking_number "$2" || return 1

					return 0
				}

				if is_valid "$USER" "$PASS" ; then
					echo >>$SCHEDULER_IMPORTANT "_weblogin authserver_message is_valid:${USER}_${PASS}"
					_log it $funcname daemon info "is_valid: user: '$USER' pass: '$PASS'"
					free=1
				else
					if   [ -z "${USER}${PASS}" ]; then
						logprio='info'
					elif _net ismacaddress "$USER"; then
						logprio='info'
					else
						logprio='alert'
						echo >>$SCHEDULER_IMPORTANT "_weblogin authserver_message NOT_valid:${USER}_${PASS}"
					fi

					_log it $funcname daemon $logprio "not valid: user: '$USER' pass: '$PASS'"
				fi
			;;
		esac
	fi

	if   _weblogin device_or_customer_needs_admin_interaction "$REMOTE_ADDR"; then
		[ -n "${USER}${PASS}${MAC}" ] && {
			if [ -e '/tmp/catch_sms' ]; then
				_log it catch daemon info "USER: $USER PASS: $PASS MAC: $MAC IP: $ip"
			else
				nexthop="$( ip route list exact '0.0.0.0/0' | head -n1 | cut -d' ' -f3 )"
				_log it catch daemon sms "USER: $USER PASS: $PASS MAC: $MAC IP: $ip nexthop: $nexthop"
				touch '/tmp/catch_sms'
			fi
		}
	elif [ "$free" = "1" ] ; then
		:
	elif [ -e '/tmp/FREE' ]; then
		_log it $funcname daemon info "[OK] auth: existing /tmp/FREE"
		free=1
	elif nf_user 'is_known' "${MAC:-mac_is_empty}"; then
		_log it $funcname daemon info "[OK] auth: is_known: $MAC"
		free=1
	else
		_log it $funcname daemon info "query local db for '$HASH'"

		[ -n "$( _db user login query hash2id "$HASH" )" ] && {
			_log it $funcname daemon info "[OK] auth: local db knows hash '$HASH'"
			free=1
		}
	fi

	if [ "$free" = "1" ]; then
		# authserver must know, if somebody NEW has logged in
		case "$SIGNAL" in
			*'_dhcp-old'*)
			;;
			*)
				echo >>$SCHEDULER "_weblogin authserver_ask '$HASH' '$MAC' '$SIGNAL' '$KEYWORD' '$LANG'"
			;;
		esac
	else
		_weblogin authserver_ask "$HASH" "$MAC" "$SIGNAL" "$KEYWORD" "$LANG" && {
			ANSWER=1
		}
	fi

	[ "$ANSWER" = '1' -o "$free" = '1' ] && {
		_weblogin device_or_customer_needs_admin_interaction "$REMOTE_ADDR" || {
			[ -n "$MAC" ] && {
				nf_user 'set_hash' "$MAC" "$HASH"
			}

			return 0
		}
	}

	case "$SIGNAL" in
		*'dhcp'*)
		;;
		*'startup'*)
			return 0
		;;
		*)
			case "$USER" in
				*':'*|'')	# macaddress OR empty
				;;
				*)
					if [ -e "$DIR_DATABASE/USER/login/meta_index" ]; then
						dbsize="$DIR_DATABASE/USER/login/meta_index = $( _file size "$DIR_DATABASE/USER/login/meta_index" ) bytes"
					else
						if [ -e '/tmp/USERDB_COPY' ]; then
							dbsize="/tmp/USERDB_COPY = $( _file size "/tmp/USERDB_COPY" ) bytes"
						else
							dbsize='no_db_found'
						fi
					fi

					_log it $funcname daemon alert "wrong credentials: ip: $ip mac: $MAC user: '$USER' pass: '$PASS' hash: '$HASH' DB: $dbsize"
				;;
			esac
		;;
	esac

	return 1
}

_weblogin_authserver()
{
	local funcname='weblogin_authserver'
	local option="$1"	# <empty> or 'is_myself'
	local cachefile="/tmp/$funcname-cache"
	local its_me='false'
	local server file

	# FIXME! wait till authserver has once said 'yes. I am'

	[ "$option" = 'is_myself' ] || {
		read -r server 2>/dev/null <"$cachefile" && {
			echo "$server"
			return 0
		}
	}

	test -e "$cachefile" || server="$( uci -q get system.@weblogin[0].authserver )"
	file='/tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY'

	is()
	{
		local server_ip="$1"

		case "$server_ip" in
			$LOADR|$WIFIADR|$LANADR|$WANADR|$BATADR)
				server="$ANYADR"
				its_me='true'
			;;
			*)
				server="$server_ip"
			;;
		esac
	}

	[ -n "$server" ] || {
		[ -e "$file" ] && read -r server <"$file"
	}

	is "$server"		# function rewrites this var if needed

	[ "$option" = 'is_myself' ] && {
		if [ "$its_me" = 'true' ]; then
			return 0
		else
			return 1
		fi
	}

	[ "$its_me" = 'true' ] || {
		[ -n "$server" ] && {
			if _net inet_seems_stable; then
				if _net ping_getlatency "$server" >/dev/null; then
					echo "$server" >"$cachefile"
				else
					server="$ANYADR"
#					echo "$server" >"$cachefile"
				fi
			else
				[ -e "$file" ] && {
					# nexthop-inet-offer
					read -r server <"$file"

					_net ping_getlatency "$server" >/dev/null && {
						echo "$server" >"$cachefile"
					}
				}
			fi
		}
	}

	echo "$server"
}

_weblogin_authserver_message()
{
	local message="$1"
	local server="${2:-$( _weblogin authserver )}"
	local url_message="$( _sanitizer run "$message" urlvalue )"

	[ -n "$server" ] || return 0

	_curl it "http://$server/cgi-bin-tool.sh?OPT=message&MSG=$url_message" || {
		echo >>$SCHEDULER_NEXTRUN "_weblogin authserver_message '$message'"
	}
}

_weblogin_authserver_ask()
{
	local funcname='weblogin_authserver_ask'

	local hash="$1"
	local mac="$2"
	local signal="$3"
	local keyword="$4"
	local lang="$5"
	local answer url params authserver mac_urlvalue

	authserver="$( _weblogin authserver )"
	mac_urlvalue="$( _sanitizer run "$mac" urlvalue )"
	params="LOGIN=$hash&MAC=$mac_urlvalue&SIGNAL=$signal&KEYWORD=$keyword&USER_LANG=$lang"

	case "$authserver" in
		''|'127.0.0.1'|"$WIFIADR"|"$LANADR")
			answer="$( /www/cgi-bin-sql.sh "$hash" "$mac" "$signal" "$keyword" "$lang" )"
		;;
		*)
			params="LOGIN=$hash&MAC=$mac_urlvalue&SIGNAL=$signal&KEYWORD=$keyword&USER_LANG=$lang"
			url="http://${authserver:-127.0.0.1}/cgi-bin-sql.sh"

			case "$0" in
				*'dhcpscript')
					if [ -e '/tmp/USERDB_COPY' ]; then
						if [ $( _system uptime min ) -lt 10 ]; then
							_log it $funcname daemon info "do not ask authserver '$authserver' during low uptime"
							answer=
						else
							answer="$( _curl it "${url}?${params}" )"
						fi
					else
						answer="$( _curl it "${url}?${params}" )"
					fi
				;;
				*)
					answer="$( _curl it "${url}?${params}" 5 )"
				;;
			esac
		;;
	esac

	[ ${#answer} -gt 10 ] && answer="shortened: $( _sanitizer run "$answer" firstline length:30 )"

	_log it $funcname daemon info "ANSWER: '$answer' (1=ok) URL: '${url:-locally_asked:}?${params}'"

	test "$answer" = '1'
}

_weblogin_ticket_mail_text()
{
	local ticket_type="${1:-unset_ticket_name}"
	local location="$( _weblogin metadata_locationname | sed 's#\\&acute;##' )"

	cat <<EOF
$( _i18n get "$LANG" wifi_system ) / $( _i18n get "$LANG" new_tickets ) / $location

$( _i18n get "$LANG" letter_salutation ),

$( _i18n get "$LANG" letter_line1 )

	$ticket_type

$( _i18n get "$LANG" letter_line2 )
$( _i18n get "$LANG" letter_line3 )
$( _i18n get "$LANG" letter_line4 )

EOF

	_weblogin mail_signature
}

_weblogin_mail_signature()
{
	local MAINTENANCE_COMPANY
	local MAINTENANCE_PHONE
	local MAINTENANCE_HINT1="$( _i18n get "$LANG" maintenance_hint1 )"	# e.g. we answer your questions
	local MAINTENANCE_HINT2="$( _i18n get "$LANG" maintenance_hint2 )"	# e.g. please call
	local emailat='@'
	local emaildot='.'

	case "$CONFIG_PROFILE" in			# FIXME! move to 'mydesign.opk'
		cvjm*)
			MAINTENANCE_COMPANY='Schnelle PC Hilfe'
			MAINTENANCE_PHONE='+49 (0341) 23 49 085'
			MAINTENANCE_HINT2="$MAINTENANCE_HINT2 $MAINTENANCE_PHONE"
		;;
		malchow*)
			MAINTENANCE_COMPANY="Malchow IT - Computertechnik & Service"
			MAINTENANCE_PHONE="+49 (39932) 54 72 02"
#			MAINTENANCE_HINT1=
			MAINTENANCE_HINT2="$MAINTENANCE_HINT2 $MAINTENANCE_PHONE"
		;;
		aschbach*|hotello*)
			MAINTENANCE_COMPANY="CaNS - Computer and Network Solutions"
			MAINTENANCE_PHONE="+49 (8167) 88 41"
#			MAINTENANCE_HINT1=
			MAINTENANCE_HINT2="$MAINTENANCE_HINT2 $MAINTENANCE_PHONE"
		;;
		olympia*)
			MAINTENANCE_COMPANY="Schlund Networks - Computer und Netzwerk im Raum Muenchen"
			MAINTENANCE_PHONE="+49 (177) 590 66 89"
#			MAINTENANCE_HINT1=
			MAINTENANCE_HINT2="$MAINTENANCE_HINT2 $MAINTENANCE_PHONE"
		;;
		paltstadt*|palais*)
			MAINTENANCE_COMPANY="Elektro Steinmetz"
			MAINTENANCE_PHONE="+49 (03643) 42 18 09"
			MAINTENANCE_HINT2="$MAINTENANCE_HINT2 $MAINTENANCE_PHONE"
		;;
		shankar*|preskil*)
			MAINTENANCE_COMPANY="Unitech Ltd."
			MAINTENANCE_PHONE="shankar${emailat}unitechplanet${emaildot}com"
			MAINTENANCE_HINT2="via email under $MAINTENANCE_PHONE"			# fixme!
		;;
		*)
			MAINTENANCE_COMPANY="bittorf wireless ))"
			MAINTENANCE_PHONE="+49 (3643) 49 65 235"	
			MAINTENANCE_HINT2="$MAINTENANCE_HINT2 $MAINTENANCE_PHONE"
		;;
	esac

	cat <<EOF
$( _i18n get "$LANG" letter_finale1 )
$( _i18n get "$LANG" letter_finale2 ) "$MAINTENANCE_COMPANY"

-- 
$MAINTENANCE_HINT1
$MAINTENANCE_HINT2
EOF
}
