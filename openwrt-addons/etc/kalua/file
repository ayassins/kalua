#!/bin/sh

_file_time()
{
	local file="$1"
	local option="$2"	# unixstamp|humanreadable

	if [ -e "$file" ]; then
		case "$option" in
			'unix'*)
				date +%s -r "$file"
			;;
			'human'*)
				_system date unixtime2date "$( date +%s -r "$file" )"
			;;
		esac
	else
		echo '0'
	fi
}

_file_is_from_today()
{
	local file="$1"

	test -e "$file" || return 1

	touch -d "$( date +%F ) 00:00:00" "$TMPDIR/today"
	test "$file" -nt "$TMPDIR/today"
}

_file_age()	# _file age "$file" -lt 10 sec
{
	local file="$1"
	local option="$2"		# e.g. 'sec' or '-gt' (greater than)
	local option_args="$3"		# e.g. 3600
	local unixtime unixtime_file age uptime

	unixtime_file=$( _file time "$file" unixstamp )		# in [sec]

	# year 1970? -> better use bootup-uptime
	[ $unixtime_file -lt 86400 ] && {
		uptime="$( _system uptime sec )"
		unixtime="$( _system date unixtime )"
		unixtime_file=$(( unixtime - uptime ))
	}

	age=$(( $( _system date unixtime ) - unixtime_file ))	# [seconds]

	case "$option" in
		humanreadable)
			_stopwatch seconds2humanreadable "$age"
		;;
		humanreadable_verbose)
			if [ $age -gt 1800 ]; then
				echo "$( _stopwatch seconds2humanreadable "$age" ) @ $( _system date unixtime2date "$unixtime_file" )"
			else
				_stopwatch seconds2humanreadable "$age"
			fi
		;;
		'-'*)
			# -gt 3600
			test "$age" $option $option_args
		;;
		sec|*)
			echo "$age"
		;;
	esac
}

_file_insert_at()
{
	local regex="$1"	# e.g. ^mystring
	local file_include="$2"
	local file_work="$3"

	# http://stackoverflow.com/questions/3784672/inserting-text-from-a-file-to-the-beginning-of-another-file-bash
	sed -i -e "2{x;G};/${regex}/{r${file_include}" -e 'd}' "$file_work"
}

_file_convert_bin2hex()		# using hexdump, to output each byte hex-representation
{				# and throw away thrash + linebreaks
	local file="$1"
	local line

	hexdump -C "$file" |
	 sed -n 's/^[0-9a-f]*\([0-9a-f ]*\)|.*/\1/p' |
	  sed -e 's/ //g' |
	   while read -r line; do {
		printf '%s' "$line"
	   } done
}

_file_convert_hex2bin()
{
	local file="$1"

	# we mostly use it for stored SSH keys, bigger is untested
	[ $( _file size "$file" ) -gt 65535 ] && return 1

	local j=1
	local content="$( dd if=$file 2>&- )"
	local size="${#content}"
	local hexbyte octal

	while [ $j -lt $size ]; do {
		hexbyte="$( echo "$content" | cut -b $j,$(( j + 1 )) )"
		j=$(( j + 2 ))

		octal="$( printf "%o" "0x$hexbyte" )"
		eval printf "\\\\$octal"
	} done
}

_file_size()
{
	local file="$1"
	local unit="$2"		# 'bytes'(default) or 'kb'
	local size

	# TODO: portable, but in blocks: du -k $file

	if command -v 'stat' >/dev/null; then
		size="$( stat --printf="%s" "$file" )"
	else
		# scraping 'ls -la' is dirty, but much faster than 'wc -c <$file'
		#
		# user@box:~ ls -l /etc/init.d/myfile
		# -rwxr-xr-x  1  1000  1000  0 Jan  3 16:50 /dir1/dir2/file
		# user@box:~ ls -l /www/robots.txt
		# lrwxrwxrwx  1  root  root 15 Aug 18 16:11 /www/robots.txt -> /tmp/robots.txt
		explode $( ls -la "$file" 2>/dev/null || echo 'O O O O x O' )

		case "${10}" in
			'->')
				# TODO: this does not work spaces in filename
				test -h "$file" && explode $( ls -la "${11}" 2>/dev/null || echo 'O O O O x O' )
			;;
		esac

		size="$5"
	fi

	[ "${size:-x}" = 'x' ] && return 1	# file does not exist

	case "$unit" in
		kb)
			size=$(( size / 1024 ))
		;;
	esac

	echo "$size"
}

_file_lines()
{
	local file="$1"

	if [ -e "$file" ]; then
		wc -l <"$file"
	else
		echo '0'
	fi
}

_file_hash()
{
	local file="$1"

	md5sum "$file" 2>/dev/null | cut -d' ' -f1
}

_file_discusage()		# [bytes]
{
	local dir="${1:-$( pwd )}"
	local file="$TMPDIR/du_$$"
	local line i=0

	ls -lR "$dir" >"$file"

	while read -r line; do {
		case "$line" in
			''|'d'*|'/'*)
			;;
			*)
				explode $line
				i=$(( i + ${5:-0} ))	# sum up bytes
			;;
		esac
	} done <"$file"
	rm "$file"

	echo $i
}

_file_is_growing()	# sad: 'lsof' is not installed and 'mv' to another filesystem is not feasible
{
	local funcname='file_is_growing'
	local file="$1"
	local check_interval=60
	local pause=5
	local s1 s2

	test -f "$file" || return 1

	while [ $check_interval -gt 0 ]; do {
		s1="$( _file size "$file" )"
		sleep $pause
		s2="$( _file size "$file" )"
		[ "$s1" = "$s2" ] || return 0

		_log it $funcname daemon debug "file '$file' not growing: $check_interval sec"
		check_interval=$(( check_interval - pause ))
	} done

	return 1
}
