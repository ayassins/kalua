#!/bin/sh

# upload
# DEST="bastian@bwireless.mooo.com:.ssh/authorized_keys.$CONFIG_PROFILE.$HOSTNAME.$MODE"
# for MODE in rsa dss; do scp -P 222 .ssh/dropbear_${MODE}_host_key.pub $DEST; done
# on server:
# cat ~/.ssh/authorized_keys.* >~/.ssh/authorized_keys

_ssh_key_public_fingerprint_get()	# output differs, whether its a SHA1 or MD5 hash
{
	local option="$1"		# keywords: 'retry' or 'keyfilename' or <empty>
	local me='ssh_key_public_fingerprint_get'
	local file_openwrt1='/etc/dropbear/dropbear_dss_host_key'	# old
	local file_openwrt2='/etc/dropbear/dropbear_rsa_host_key'	# newer/since r46814
	local file_openwrt3='/etc/dropbear/dropbear_ecdsa_host_key'	# e.g. debian or future
	local file_openwrt4='/etc/dropbear/dropbear_ed25519_host_key'	# e.g. 2021+
	local file_debian='/etc/ssh/ssh_host_rsa_key'
	local nop file

	# TODO: path can be /etc/ssh/... (debian)

	[ "$option" = 'keyfilename' ] && nop=':'

	if   [ -f "$file_openwrt2" ]; then	# try modern first
		file="$file_openwrt2"
		$nop dropbearkey -y -f "$file" | grep -F 'Fingerprint:' | cut -d' ' -f3
	elif [ -f "$file_openwrt1" ]; then
		file="$file_openwrt1"
		$nop dropbearkey -y -f "$file" | grep -F 'Fingerprint:' | cut -d' ' -f3
	elif [ -f "$file_openwrt3" ]; then
		file="$file_openwrt3"
		$nop dropbearkey -y -f "$file" | grep -F 'Fingerprint:' | cut -d' ' -f3
	elif [ -f "$file_openwrt4" ]; then
		file="$file_openwrt4"
		$nop dropbearkey -y -f "$file" | grep -F 'Fingerprint:' | cut -d' ' -f3
	elif [ -f "$file_debian" ]; then
		# FIXME! for openssl-only
		# https://bugs.launchpad.net/ubuntu/+source/dropbear/+bug/1009868
		/usr/lib/dropbear/dropbearconvert openssh dropbear "$file_debian" "$file_openwrt2" && {
			_$me 'retry'
			return 0
		}

		file="$file_debian"
		# e.g. SHA256:LliBzdefJ+t2Kczv131e/ae2sIPnAk2giX7zZiZJ8O8
		$nop ssh-keygen -l -f "$file" | cut -d' ' -f2
	else
		[ -z "$option" ] && {
			_ssh sanitize_and_cleanup_keys && _$me 'retry'
		}
	fi

	[ -n "$file" -a "$option" = 'keyfilename' ] && echo "$file"
}

_ssh_start()
{
	if pidof dropbear >/dev/null; then
		/etc/init.d/dropbear restart	# e.g. key regen
	else
		/etc/init.d/dropbear start
	fi
}

_ssh_stop()
{
	killall dropbear

	sleep 3
	local pid="$( _system get_first_pid dropbear )"

	if [ -n "$pid" ]; then
		kill -9 $pid
	else
		true
	fi
}

_ssh_regen_keys()
{
	local funcname='ssh_regen_keys'
	local file1='/etc/dropbear/dropbear_dss_host_key'
	local file2='/etc/dropbear/dropbear_rsa_host_key'
	local file3='/etc/dropbear/dropbear_ecdsa_host_key'
	local file4='/etc/dropbear/dropbear_ed25519_host_key'
	local file

	_log it $funcname daemon info '[START]'

	for file in "$file1" "$file.pub" "$file2" "$file2.pub" "$file3" "$file3.pub" "$file4" "$file4.pub"; do {
		[ -f "$file" ] && {
			_log it $funcname daemon alert "[OK] removing '$file'"
			rm "$file"
		}
	} done

	_ssh start

	[ -e "/tmp/$funcname" ] && rm "/tmp/$funcname"
	loop init; while loop max 100; do {
		[ -f "$file1" -o -f "$file2" -o -f "$file3" -o -f "$file4" ] && break

		_watch counter "/tmp/$funcname" increment 1 max 100 || return 0
		sleep 1
	} done

	_ssh sanitize_and_cleanup_keys

	_log it $funcname daemon info '[READY]'
}

_ssh_usable_ciphers()
{
	local line

	dropbearkey 2>&1 | while read -r line; do {
		test ${#line} -le 7 && echo "$line"	# e.g. rsa dss ecdsa ed25519
	} done
}

_ssh_sanitize_and_cleanup_keys()
{
	local funcname='ssh_sanitize_and_cleanup_keys'
	local file mode do_restart='false'

	command -v 'dropbearkey' >/dev/null || return 0
	[ -h "$HOME/.ssh" ] || ln -fs '/etc/dropbear' "$HOME/.ssh"

	for mode in $( _ssh usable_ciphers ); do {
		file="/etc/dropbear/dropbear_${mode}_host_key"

		[ -s "$file" ] || {
			[ -e "$file" ] && rm -f "$file"

			if dropbearkey -t "$mode" -f "$file"; then
				do_restart='true'
				_log it $funcname daemon alert "[OK] generated $mode-key"

				[ -s "$file.pub" ] || {
					_log it $funcname daemon alert "invalid pubkey: writing '$file.pub'"

					dropbearkey -y -f "$file" | grep ^'ssh-' >"$file.pub"
					chmod 0600 "$file.pub"
				}
			else
				_log it $funcname daemon alert "generating $mode-key failed"
			fi
		}
	} done

	[ "$do_restart" = 'false' ] || _ssh start
}
