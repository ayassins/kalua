#!/bin/sh

_math_percentof()		# echo $(( (1775 * 10000) / 435790 ))
{
	local val1=$1		# e.g. 1775	// the small value
	local val2=$2		# e.g. 435790	// the huge number
				# is: (1775 * 100) / 435790 = 0.40%

	# https://stackoverflow.com/questions/24284460/calculating-rounded-percentage-in-shell-script-without-using-bc

	divisor_valid "$val2" || val2=1
	local beforce_comma=$(( (val1 * 100) / val2 ))	# divisor_valid
	local after_comma=$(( (val1 * 10000) / val2 ))	# divisor_valid

	[ $beforce_comma -gt 0 ] && after_comma="$( echo "$after_comma" | cut -b$(( ${#beforce_comma} + 1 ))- )"

	echo "$beforce_comma.$after_comma"
}

_math_percentual_change()
{
	local val1=$1
	local val2=$2

	val1="$( echo "$val1" | tr -d '.' )"	# no floats
	val2="$( echo "$val2" | tr -d '.' )"

	if [ $val1 -eq $val2 ]; then
		echo "0"
	else
		divisor_valid "$val1" || val1=1
		echo $(( ((val2 - val1) * 100) / val1 ))	# divisor_valid
	fi
}

_math_random_integer()		# OUT1: integer, higher or equal => $START and lower or equal <= $END
{
	local start="${1:-0}"
	local end="${2:-256}"
	local seed diff random out

	seed="$( hexdump -n 2 -e '/2 "%u"' /dev/urandom )"	# e.g. 0...65535
	[ $end -gt 65535 ] && seed=$(( seed * seed ))

	diff=$(( end + 1 - start ))
	divisor_valid "$diff" || diff=1	# happens with input start=1 end=0
	random=$(( seed % diff ))	# result: integer somewhere between 0...$diff - divisor_valid
	out=$(( start + random ))

	echo "${out:-$start}"
}

_math_divide10()	# SENSE: sets point in front of last digit 976 = 97.6
{
	local VALUE="$1"

	[ $VALUE -lt 10 ] && VALUE="0${VALUE}"			# leading zero, looks better ".4 -> 0.4"

	printf '%s' "$VALUE" | sed -n 's/^\(.*\)\([0-9]\)$/\1\.\2/p'	# 976 = 97.6 , ash can't calc with floats
}

_math_bytes2unit ()		# SENSE: humanreadable but not correct bytes -> k|m|g-Bytes conversion
{				#       ash can't calc with floats, so we use sed to 'calc' (not AWK!)
	local VALUE="$1"
	local UNIT="$2"			# can be kb, mb, gb, bytes
	local ARG3="$3"			# can be "dotted" - so we convert 123456789 = 123.456.789
	local ARG4="$4"			# can be "pre" - so we enclose the number in html-<tt>'s
	local OUT

	case "$UNIT" in
		kb|KB|kbytes|KBytes)
			case ${#VALUE} in
				0|1|2) OUT=0 ;;
				    3) OUT=1 ;;
				    *) OUT="$( echo $VALUE | sed -n 's/^\(.*\).../\1/p' )" ;;			# cut off last 3 digits
			esac
		;;
		mb|MB|mbytes|MBytes)
			case ${#VALUE} in
				0|1|2|3|4|5) OUT=0 ;;
					  6) OUT=1 ;;
					  *) OUT="$( echo $VALUE | sed -n 's/^\(.*\)....../\1/p' )" ;;   	# cut off last 6 digits
			esac
		;;
		gb|GB|gbytes|GBytes)
			case ${#VALUE} in
				0|1|2|3|4|5|6|7|8) OUT=0 ;;
						9) OUT=1 ;;
						*) OUT="$( echo $VALUE | sed -n 's/^\(.*\)........./\1/p' )" ;;	# cut off last 9 digits
			esac
		;;
		*)
			OUT=$VALUE
		;;
	esac

	[ -n "$ARG3" ] && {
		[ "$ARG3" = "dotted" ] && {
			OUT="$( echo "$OUT" | sed -e :a -e 's/^\(.*[0-9]\)\([0-9]\{3\}\)/\1\.\2/;ta' )"
		}

		[ "$ARG4" = "pre" ] && {
			OUT="<tt>$OUT</tt>"

			[ "$ARG3" = 'dotted' ] && {	# dotted and preformatted text?
				# looks nicer
				OUT="$( echo $OUT | sed 's/\./<\/tt><small>\.<\/small><tt>/g' )"
			}
		}
	}

	printf '%s' "$OUT"
}
