#!/bin/sh

# this outputs an initial small '/tmp/loader' which can be sourced and
# automatically solves dependencies for all 'classes' and its methods(),
# e.g. for class '_system' and method architecture()

# "Stick to portable constructs where possible, and
#  you will make somebody's life easier in the future.
#  Maybe your own."

CALL_REASON="${1:-no_reason_given}"
umask 0000

grep -q ^'tmpfs /tmp' /proc/mounts || {
	TMPDIR='/kalua'
	grep -q " $TMPDIR tmpfs" /proc/mounts || {	# TODO: check for UID=0?
		mkdir -p "$TMPDIR"
		mount -t tmpfs -o 'size=50%' none "$TMPDIR" 2>/dev/null || TMPDIR=
	}
}

logger -s -- "$0: [OK] generating loader ('$CALL_REASON') var \$TMPDIR is '${TMPDIR:=/tmp}'"

LOADER_ENTRY='/tmp/loader'		# entry point for all scripts, should be in RAM-drive
LOADER="$TMPDIR/loader_$$"
LOADER_FINAL="$TMPDIR/loader"		# later '$LOADER_ENTRY' is symlinked to it
POOLDIR="$TMPDIR/kalua_pool"
mkdir -p "$POOLDIR"

BASEDIR="$( dirname $0 )/kalua"		# place for the 'class'-files
case "$BASEDIR" in			# e.g. /etc/kalua_init -> /etc
	'/'*)	# /etc/kalua
	;;
	*)	# openwrt-addons/etc/kalua -> /home/user/mysource/openwrt-addons/etc/kalua
		BASEDIR="$( pwd )/$BASEDIR"
	;;
esac

# _ s http		-> show functions for class 'http'
# _ u http		-> unload all functions from class 'http'
# _ http arg1 argX	-> include + start with given arguments
# _ rebuild		-> rebuild loader
# _ t			-> test if loader already included
# _			-> list classes

cat >"$LOADER" <<EOF
#!/bin/sh
_ t 2>/dev/null&&return

_(){ case \$1 in
s)sed -n "/;}$/! s/^\(_\${2}_.*\)()/\1/p" $BASEDIR/\$2|sort;;
u)type _\${2}_s>/dev/null 2>&1||return;local l x=;while read -r l;do case "\$l" in _\${2}_*)x="\$x \${l%()*}";;esac;done<$BASEDIR/\$2;unset -f \$x _\$2_s _\$2_include;eval "_\$2(){ _ i \$2 \"\\\$@\";}";;
i)local a=\${3:-s} b=\$2;shift 3;_ \$b;case \$a in include);;*)_\${b}_\$a "\$@";;esac;;
t);;rebuild)${BASEDIR}_init "\$@";;*)[ \$1 ]&&command . $POOLDIR/\$1||
for _ in $POOLDIR/*;do echo _\${_##*/};done;;esac
}

TMPDIR=$TMPDIR
EOF

# generate loader and add functions 'show' + 'include'
for CLASS in $BASEDIR/*; do {
	CLASS="${CLASS##*/}"	# quick basename

	cat >"$POOLDIR/$CLASS" <<EOF
_$CLASS(){ local a=\${1:-s};shift;_${CLASS}_\$a "\$@";}
_${CLASS}_s(){ _ s $CLASS;}
_${CLASS}_include(){ :;}
. $BASEDIR/$CLASS
EOF
	if sh -n "$BASEDIR/$CLASS"; then
		echo >>"$LOADER" "_$CLASS(){ _ i $CLASS \"\$@\";}"
	else
		echo >>"$LOADER" "_$CLASS(){ logger -s -- class_error: _$CLASS \"\$@\" ;}"
		cp -v "/rom/$BASEDIR/$CLASS" "$BASEDIR/$CLASS"		# last chance
	fi

	# include everything in head-section of CLASS, e.g. global var: MYVAR=123
	# TODO: rewrite with 1 sed-call
	read -r LINE _ <"$BASEDIR/$CLASS"
	case "$LINE" in
		'#!/bin/sh'*)
			sed -n "2,/^_/{/^[A-Z]/p}" "$BASEDIR/$CLASS" >>"$LOADER"
		;;
	esac
} done

# not fully build, but simple calls are already working:
. $LOADER

# include own extensions
for FILE in "$0.user_"* "$0.user"; do {
	case "$FILE" in
		*'*')
		;;
		*'.include')
			cat "$FILE" >>"$LOADER"
		;;
		*)
			. "$FILE" >>"$LOADER"
		;;
	esac
} done

filesize() { wc -c 2>/dev/null <"$1" || echo 0; }

mv -f "$LOADER" "$LOADER_FINAL"
[ $( filesize "$LOADER_FINAL" ) -eq $( filesize "$LOADER_ENTRY" ) ] || {
	[ "$LOADER_ENTRY" = "$LOADER_FINAL" ] || {
		[ "$( readlink "$LOADER_ENTRY" )" = "$LOADER_FINAL" ] || {
			# symlink /tmp/loader -> copy in ramdisc
			ln -sf "$LOADER_FINAL" "$LOADER_ENTRY"
		}
	}
}

logger -s -- "$0: [OK] generated '$LOADER_ENTRY' using files in '$POOLDIR'"
case "$PS1-display$DISPLAY" in
	*'@'*|*'-display:'*)	# interactive shell (the '@' is set via /etc/profile)
		logger -s -- "$0: [OK] interactive usage: reload it with 'unset -f _; . $LOADER_ENTRY'"
	;;
esac
