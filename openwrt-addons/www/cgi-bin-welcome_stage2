#!/bin/sh
. /tmp/loader

eval $( _http query_string_sanitize "$0" )

# FIXME! use these vars, if possible:
#
# HTTP_ACCEPT_CHARSET=ISO-8859-1,utf-8;q=0.7,*;q=0.3
# HTTP_ACCEPT_CHARSET=utf-8, iso-8859-1, utf-16, *;q=0.7
#
# HTTP_USER_AGENT=Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/534.6 (KHTML, like Gecko) Chrome/6.0.495.0 Safari/534.6
# HTTP_USER_AGENT=Mozilla/5.0 (Linux; U; Android 2.3.4; de-de; Nexus S Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
#
# HTTP_ACCEPT=application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
# HTTP_ACCEPT=application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
#
# SERVER_SOFTWARE=uHTTPd
# HTTP_REFERER=http://10.63.121.1/cgi-bin-welcome.sh?REDIRECTED=1
# REDIRECT_STATUS=200 | REDIRECT_STATUS=404

if [ "$REQUEST_METHOD" = 'POST' ]; then
	if [ -n "$FORM_RULES" ]; then				# rules accepted
		MAC="$( _net ip2mac "$REMOTE_ADDR" )"
		DEV="$( _net mac2dev "$MAC" )"			# fixme! empty mac = call from mesh/not local -> show error

		case " $WIFI_DEVS " in
			*" $DEV "*)
				SIGNAL="$( _wifi signal_get "$DEV" "$MAC" )"
			;;
			*)
				SIGNAL='lan'
			;;
		esac

		case "$FORM_USER" in
			[0-9a-f][0-9a-f][:-]*)
				FORM_USER='weblogin_with_macaddress'
			;;
		esac

		_log it weblogin_try daemon info \
			"ip: '$REMOTE_ADDR' mac: '$MAC' dev: '$DEV' user: '$FORM_USER' pass: '$FORM_PASS' signal: '$SIGNAL' lang: '$FORM_LANG'"

		login_ok()	# first try normal operation, than auth by mac/hostname
		{
			case "$FORM_USER" in
				'test'|'debug')
					return 1
				;;
			esac

			_weblogin login_check "$FORM_USER" "$FORM_PASS" "$MAC" "$SIGNAL" "$FORM_LANG" && return 0
			_weblogin login_check "$MAC" "$HOSTNAME" "$MAC" 'macauth_over_weblogin'
		}

		if   login_ok ; then
			if _netfilter user_add "$MAC" "$REMOTE_ADDR"; then
				_watch counter "/tmp/WEBLOGIN_SUCCESS" increment
				_log it weblogin_success daemon info "mac: '$MAC' ip: '$REMOTE_ADDR'"

				# FIXME! needs server/client interaction or localmirrored db
				PROFILE_ID="$( _db user profile list first )"
				_http redirect 302 landing_page "$PROFILE_ID"
			else
				_watch counter "/tmp/WEBLOGIN_FAIL" increment

				if [ -z "$MAC" ]; then
					_http redirect 302 ip_clients_real_gateway "$REMOTE_ADDR"
				else
					_log it weblogin_failed daemon sms "auth ok, but not netfilter add: ip: '$REMOTE_ADDR' mac: '$MAC'"
					_weblogin htmlout_loginpage "$FORM_LANG" "$SHOW_RULES" "true"
				fi
			fi
		else
			_watch counter "/tmp/WEBLOGIN_FAIL" increment

			if [ -z "$MAC" ]; then
				_http redirect 302 ip_clients_real_gateway "$REMOTE_ADDR"
			else
				# for plain logging on gateway
				_weblogin login_check "$FORM_USER" "$FORM_PASS" "$MAC" "$SIGNAL" "$FORM_LANG" 'plaintext'

				_log it weblogin_failed daemon info "auth failed: ip: '$REMOTE_ADDR'"
				_weblogin htmlout_loginpage "$FORM_LANG" "$SHOW_RULES" 'true'
			fi
		fi
	else
		# FIXME! send error(s!) to show (user,pass,rules,inetconnection...)
		_watch counter "/tmp/WEBLOGIN_FAIL" increment

		_log it weblogin_norules daemon info "ip: '$REMOTE_ADDR' lang: '$LANG' formlang: '$FORM_LANG'"
		_weblogin htmlout_loginpage "$FORM_LANG" "$SHOW_RULES" "false" "true"
	fi
else
	if [ "$REDIRECTED" = '1' ]; then
		if _net inet_seems_stable; then
			_log it weblogin_splash daemon info "ip: '$REMOTE_ADDR' lang: '${FORM_LANG}' HTTP_USER_AGENT: '$HTTP_USER_AGENT'"
			_weblogin htmlout_loginpage "$FORM_LANG" "$SHOW_RULES"
		else
			[ -n "$REMOTE_ADDR" -a "$REMOTE_ADDR" != '127.0.0.1' ] && {
				# FIXME! send sms?
				DEFGW="$( ip route list exact 0.0.0.0/0 table main )"
				_log it weblogin_inet_unstable daemon alert \
					"inet_broken - lang: '$FORM_LANG' cost_int: '$COST_INT' defgw: '$DEFGW' IP: '$REMOTE_ADDR'"
			}

			_weblogin htmlout_loginpage "$FORM_LANG" 'inet_broken'
		fi
	else
		_log it weblogin_redirect daemon info "ip: '$REMOTE_ADDR' query: '$QUERY_STRING'"
		_http redirect 302 ip_incoming_interface
	fi
fi
