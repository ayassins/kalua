#!/bin/sh
. /tmp/loader

if [ -z "$1" ]; then
	_http header_mimetype_output 'text/plain'

	# LOGIN={md5sum_of_user+pass} | MAC=00:11:22:33:44:55 | SIGNAL=-64 | KEYWORD=username+pass | USER_LANG=de de-DE,
	eval $( _http query_string_sanitize "$0" )

	[ -e '/tmp/CRON_LASTCALL' ] && {
		[ $( _stopwatch stop '/tmp/CRON_LASTCALL' interim,nolog,seconds ) -gt 900 ] && {
			/etc/init.d/S51crond_fff+ restart
		}
	}
else
	LOGIN="$1"
	MAC="$2"
	SIGNAL="$3"
	KEYWORD="$4"		# can be 'deepcheck' when called from cron.add_user...
	USER_LANG="$5"	
fi

[ -z "$LOGIN" ] && {
	_log it cgi-bin-sql daemon info "no args/login-data given - abort: args: '$*' REMOTE: $REMOTE_ADDR"
	exit 1
}

_weblogin authserver is_myself || {
	# FIXME! how to avoid pingpong? (e.g. REMOTE = authserver? can that happen?)
	AUTHSERVER="$( _weblogin authserver )"
	if [ -z "$REMOTE_ADDR" ]; then
		_log it cgi-bin-sql daemon debug "empty REMOTE_ADDR - abort"
		exit
	elif [ "$REMOTE_ADDR" = "$AUTHSERVER" ]; then
		_log it cgi-bin-sql daemon info "authserver = remote = $REMOTE_ADDR"
	else
		_log it cgi-bin-sql daemon info "authserver not local - forwarding request for '$REMOTE_ADDR' to $AUTHSERVER"

		# FIXME! simply reuse QUERY_STRING?
		USER_LANG="$( _sanitizer run "$USER_LANG" urlvalue )"
		URL="LOGIN=${LOGIN}&MAC=${MAC}&SIGNAL=${SIGNAL}&KEYWORD=${KEYWORD}&USER_LANG=$USER_LANG"

		if [ -e '/usr/sbin/uhttpd' ]; then
			URL="http://$AUTHSERVER/cgi-bin-sql.sh?$URL"
		else
			URL="http://$AUTHSERVER/cgi-bin-sql?$URL"
		fi

		_curl it "$URL"
		exit
	fi
}

_system include				# fixme! move all from this line down to weblogin()

# TODO: DATE/DNS is only for logging, remove?
# DATE="$( _system date full )"
# DNS="$( nslookup ${REMOTE_ADDR:=127.0.0.1} 2>/dev/null | sed -n 's/^Name:[^a-zA-Z0-9]*\(.*\)\.olsr/\1/p' )"	# https?
OUT="'$DATE' - IP:'$REMOTE_ADDR' - DNS:'${DNS:-unresolveable}' = HASH:'$LOGIN' - MAC:'$MAC' - SIGNAL:'$SIGNAL' - KEYWORD:'$KEYWORD' - LANG:'$USER_LANG'"

build_vars()
{
		LASTSEEN="$( _system date unixtime )"
		LANG="$USER_LANG"

		if [ "$SIGNAL" = 'lan' ]; then
			DEVTYPE=1
		else
			DEVTYPE=0	# wifi
		fi

		export DEVTYPE LASTSEEN
}

if   [ -e '/tmp/FREE' ]; then
	_log it cgi-bin-sql daemon debug "[OK] free: user $MAC - $OUT"
	echo '1'
elif nf_user 'is_known' "$MAC" && [ "$KEYWORD" != 'deepcheck' ]; then
	_log it cgi-bin-sql daemon debug "[OK] free mac '$MAC' - already known"
	echo '1'
elif [ -n "${USER_ID:=$( _db user login query hash2id "$LOGIN" )}" ]; then
	# FIXME! use always HASH for keyword
	# FIXME! this can last long

	USER_ID_STACK="$USER_ID"

	# FIXME!
	if [ -e "/tmp/cache_device_string2id_$USER_ID_STACK.$MAC" ]; then
		read -r DEVICE_ID <"/tmp/cache_device_string2id_$USER_ID_STACK.$MAC"
		# FIXME! autorepair cache-errors
		isnumber "${DEVICE_ID:-0}" || rm "/tmp/cache_device_string2id_$USER_ID_STACK.$MAC"
	else
		DEVICE_ID="$( _db user device query string2id "A='$USER_ID_STACK';B='${MAC:-unsetmacaddress}'" )"
		isnumber "${DEVICE_ID:-0}" && echo "$DEVICE_ID" >"/tmp/cache_device_string2id_$USER_ID_STACK.$MAC"
	fi

	if [ -n "$DEVICE_ID" ]; then
		eval "$( _db user device show "$DEVICE_ID" )"	# FIXME! check for time or traffic-range overrun

		build_vars

		_log it cgi-bin-sql daemon info "OLD user, updating DB '$LOGIN' - $OUT"
		echo >>$SCHEDULER "_db user device update '$DEVICE_ID' '$USER_ID_STACK' '$MAC' '$DEVTYPE' '$LANG' '$FIRSTSEEN' '$LASTSEEN' '$USED_TRAFFIC' '$USED_TIME' '$USED_TRAFFIC_TODAY' '$USED_TIME_TODAY' '$ISOLATION'"
	else
		build_vars
		FIRSTSEEN="$LASTSEEN"
		USED_TRAFFIC=0
		USED_TIME=0

		_log it cgi-bin-sql daemon info "NEW user, adding to DB '$LOGIN' - $OUT"
		echo >>$SCHEDULER "_db user device add '$USER_ID_STACK' '$MAC' '$DEVTYPE' '$LANG' '$FIRSTSEEN' '$LASTSEEN' '$USED_TRAFFIC' '$USED_TIME' '$USED_TRAFFIC_TODAY' '$USED_TIME_TODAY' '$ISOLATION'"

		nf_user 'set_hash' "$MAC" "$LOGIN"			# LOGIN = HASH

		eval $( _db user device show last "USER_ID" )		# use $USER_ID_STACK ?
		DEVICE_ID="$ID"
		eval $( _db user login show "$USER_ID" )

		is_new_device_for_this_login()
		{
			case "$DEVICE_ID" in
				*" $USED "*)		# list of all device_id's, which have used this login
					return 0
				;;
				*)
					return 1
				;;
			esac
		}

		is_new_device_for_this_login && {
			if [ -z "$USED" ]; then
				USED=" $DEVICE_ID "

				[ -e "$DIR_DATABASE/USER/profile/id${PROFILE_ID}_counterA" ] && {
					read -r UNUSED_TICKETS <"$DIR_DATABASE/USER/profile/id${PROFILE_ID}_counterA"
					echo "$(( UNUSED_TICKETS - 1 ))" >"$DIR_DATABASE/USER/profile/id${PROFILE_ID}_counterA"
				}
			else
				USED="${USED}${DEVICE_ID} "
			fi

			echo >>$SCHEDULER "_db user login update '$USER_ID' '$PROFILE_ID' '$COMMENT' '$USERNAME' '$PASSWORD' '$DEVICE_QUANTITY' $INSTALLED' '$FUZZY' '$USED'"
		}

		echo >>$SCHEDULER "_db ticketcheck $PROFILE_ID"
	fi

	echo >>$SCHEDULER '_db backup minor_update_user_foo'
	echo "1"
else
	case "$SIGNAL" in
		'startup'*)
			if _system maintenance_window_active; then
				LOGPRIO='info'
			else
				case "$SIGNAL" in
					*"nightly_reboot"*)
						LOGPRIO='info'
					;;
					*)
						LOGPRIO='alert'
					;;
				esac
			fi

			[ -n "$REMOTE_ADDR" ] && {
				_log it cgi-bin-sql daemon "$LOGPRIO" "remote_node_startup: $REMOTE_ADDR $SIGNAL"
			}
		;;
		*'_dhcp-old')
		;;
		*)
			_log it cgi-bin-sql daemon info "login_failed: $OUT"
		;;
	esac

	echo "0"
fi
