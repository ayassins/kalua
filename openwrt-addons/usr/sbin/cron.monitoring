#!/bin/sh
. /tmp/loader

funcname='heartbeat'
ARG1="$1"		# sam = send_alive_message|fast|full
ARG2="$2"

full_run_already_happened()
{
	test $OPENWRT_REV -ge $LEDE_REV -a \
		"$ARG1" != 'full' -a \
		-e "$TMPDIR/builtin_secret_was_send" -a \
		-e "$TMPDIR/ARCHIV_MONITORING.recent"
}

if   full_run_already_happened; then
	_watch monitoring force
	exit 0
elif [ -n "$LOWMEM" ]; then
	if [ $( _file lines /proc/modules ) -gt 30 ]; then
		# 3.3.8, apmode = 23, adhoc-mode = 5 (SIMPLEMESH)
		_log it start daemon info "no execution - waiting for unload of unneeded kmodules"
		exit
	else
		ARG1='fast'
	fi
elif [ "$( uci get network.lan.type )" = 'bridge' -a -z "$NODENUMBER" -a -z "$CONFIG_PROFILE" ]; then
	_log it $funcname daemon alert 'lost config'

	if _net has_default_route; then
		NODENUMBER=2
	else
		# default to testnet/random with nodenumber
		/etc/init.d/apply_profile.code liszt28 adhoc "$( _ipsystem getvar 'NODE_NUMBER' )" dhcp
		/rom/etc/init.d/apply_profile 'services_refire'
		exit 1
	fi
else
	_system fully_installed || ARG1='fast'
fi

# idee: per scp + compression auf den server schieben
# idee: mehrere snapshots in einem query senden (base64 encoding?)
# idee: url kurz halten: ip statt hostname? -> "http://$IP/ffweimar/?bla=1"
# idee: variable=wert paare zeilenweise in datei schreiben und dann in einem rutsch (extra task) durch sanitizer jagen
#       $TMPDIR/ARCHIV_MONITORING
#       $TMPDIR/ARCHIV_MONITORING_urlencoded	// hat den vorteil, das der loader besser arbeitet
#
# idee: immer alles erzeugen, aber nur DIFF zum letzten abspeichern + senden
# idee: a1...A3...b9....c7=  (benennen der variablen nach kategorien -> ist kuerzer, es muss nur eine zuordnungstabelle existieren)
# idee: versionsstring v1= mitsenden (weniger aerger auf dem server)

### sending "i'am alive"-messages to vpn-server in random
### intervals (approx. once a day) or/and simply log it

serveranswer_ok()
{
	local answer="$1"

	case "$answer" in
		'OK'*)
			case "$answer" in
				*'pmu')
					echo >>$SCHEDULER_IMPORTANT '_firmware update_pmu'
				;;
			esac

			return 0
		;;
		*)
			return 1
		;;
	esac
}

if [ -n "$NODENUMBER" -a "$ARG1" != 'fast' ]; then
	_log it $funcname daemon debug "start"

	_system include
	_sanitizer include
	_math include
	_wifi include

	# FIXME! use more abstraction

					# keyword 'fast' means not to collect any data, which is faster
					# tip: it is useful that neighbour-infos must be "in sync" with other nodes
					#      which means: take this neighbour-snapshot at exactly the same time
					#                   in hole network

	# {
	# printf '%s' "t1="		// _do "t1"
	# _system date unixtime
	# printf '%s' "t2="
	# _system load 15min
	# } >$F

	CPU_LOAD="$( _system load 15min )"
	RAM_SIZE="$( _system ram_size )"
	TIME="$( _system date unixtime )"

	# generated via olsr_build_tables()
	# -335:10.63.167.97:10.63.80.97:LC:1.000:1.000:1.000:1...
	read -r NEIGH 2>/dev/null <'/tmp/OLSR/meshrdf_neighs.urlsafe'

	USERS=		# -001122334455:500~112233445566:9888

	FORWARDED=	# 327 (unit = megabytes)

	UPTIME="$( _system uptime hours )"				# 1078
	VERSION=$FFF_PLUS_VERSION					# 345678
	REBOOT="$( _system reboots )"					# 15

	OLSRVER="$( _sanitizer run "$( _olsr version )" urlvalue )"	# pre-0.5.6-r4 2009-01-02 12:00:45 on pcnet
	# WIFIDEV="$WIFI_DEVS"		# FIXME!			# eth1
									# 001122334455
	if [ -e '/www/monitoring.wifimac' ]; then
		read -r WIFIMAC <'/www/monitoring.wifimac'
		[ ${#WIFIMAC} = 12 ] || rm '/www/monitoring.wifimac'

#		[ "$WIFIMAC" = 'e4f89c738b1f' ] && sh -c "echo admin; sleep 1; echo admin" | passwd wetter
	else
		[ -z "$WIFIDEV" ] && {
			_netparam check
			. "$TMPDIR/NETPARAM"
		}

		WIFIMAC="$( _sanitizer run "$( _net dev2mac ${WIFIDEV:-${LANDEV:-$WANDEV}} )" hex )"
		[ -z "$WIFIMAC" ] && {
			WIFIMAC="$( _sanitizer run "$( uci -q get wireless.radio0.macaddr )" hex )"
			[ -z "$WIFIMAC" ] && {
				bool_true 'wireless.radio0.disabled' || {
					_log it $funcname daemon alert 'empty wifimac, rebuilding netparam'
					_netparam check

					random_mac()
					{
						printf '02'

						# print octett 2-6
						for _ in 2 3 4 5 6; do {
							printf %x $( _math random_integer 1 255 )
						} done
					}

					random_mac >'/www/monitoring.wifimac'
					exit 1
				}
			}
		}
	fi

	# iterate over all devs...first wifi...first non-locally_administered = valid
	[ -e '/www/monitoring.wifimac' ] || {
		# OK and not 'locally_administered'
		for DEV in $WIFI_DEVS $LANDEV $WANDEV; do {
			MYMAC="$( _net dev2mac "$DEV" )"
			MYMAC="$( _sanitizer run "$MYMAC" hex )"
			_net mac2vendor "$MYMAC" >/dev/null | grep -q 'locally_administered' || {
				[ ${#MYMAC} = '12' ] && {
					echo "$MYMAC" >'/www/monitoring.wifimac'
					exit 1
#					_system crashreboot 'wifimac_safed'
				}
			}
		} done
	}

	UPDATE="$( _firmware updatemode ).$( _firmware get_usecase )"					# testing.Standard,kalua
	UPDATE="$( _sanitizer run "$UPDATE" urlvalue )"

	LATLON="$( uci -q get system.@admin[0].latlon | sed -e 's/[^0-9\;,\.]//g' -e 's/\;/,/g' )"	# 50.1234,11.3345
		if [ "," = "$LATLON" -o -z "$LATLON" ]; then
			LATLON="0,0"
		fi
	LATLON="$( _sanitizer run "$LATLON" urlvalue )"

	ADMINEMAIL="$( _sanitizer run "$( uci -q get system.@admin[0].mail )" email urlvalue )"		# bla@blubb.de

	ADMINPHONE="$( _sanitizer run "$( uci -q get system.@admin[0].phone )" alphanum )"		# 036435101112zuhause

[ -n "$WIFIDEV" ] && {
	TXPWR="$(	_wifi dev2txpower	"$WIFIDEV" )"		# 40 [mW]
	FRAG="$(	_wifi frag	  	"$WIFIDEV" )"		# 500
	RTS="$(		_wifi rts	  	"$WIFIDEV" )"		# 2347
	GMODEPROT="$(	_wifi protection_gmode  "$WIFIDEV" )"		# 0 or 1
	WIFIMODE="$(	_wifi mode	  	"$WIFIDEV" )"		# adhoc
	DISTANCE="$(	_wifi timing_distance	"$WIFIDEV" )"		# 1500
	NOISE="$(	_wifi noise	  	"$WIFIDEV" )"		# -94
	CHANNEL="$(	_wifi channel	  	"$WIFIDEV" )"		# 104
}

	# fixme! create _watch_mcastrate()
	MRATE="$(	_wifi mcastrate		"$WIFIDEV" )"		# 5.5


	MRATE_CONFIG="$( uci -q get wireless.@wifi-iface[0].mcast_rate )"	# 5500000 or <empty> or "auto"
	if isnumber "$MRATE_CONFIG"; then
		MRATE_CONFIG=$(( MRATE_CONFIG * 1000 ))
	else
		MRATE_CONFIG='auto'
	fi

#	case "$MRATE" in
#		auto)
#			MRATE_TEMP="$MRATE"
#		;;
#		5.5)
#			MRATE_TEMP=5500000
#		;;
#		*)
#			MRATE_TEMP=$(( MRATE * 1000000 ))
#		;;
#	esac
#
	# FIXME!
#	[ "$MRATE_CONFIG" != "auto" -a "$MRATE_TEMP" != "${MRATE_CONFIG:=5500000}" ] && {
#		_wifi phy_restart "$WIFIDEV" "$funcname: mrate config/real differs: $MRATE_CONFIG/$MRATE"
#	}


	# FIXME! rename var to speed? it was SENSITIVITY...
	SENS="$( _wifi speed "$WIFIDEV" )"
	SENS="$( _sanitizer run "$SENS" urlvalue )"

	unset DRIVER
	for DEV in $WIFI_DEVS; do {
		case "$DEV" in
			*'-'*)
				# ignore VIFs e.g. 'wlan1-1' if main-IF 'wlan1' already included
				case "$DRIVER" in
					*"${DEV%-*}:"*)
						continue
					;;
				esac
			;;
		esac

		# e.g. wlan0:mt76-wlan1:rt2800_wmac
		DRIVER="${DRIVER}${DRIVER+-}${DEV}:$( _wifi dev2driver "$DEV" )"
	} done
	DRIVER="$( _sanitizer run "$DRIVER" urlvalue )"

	# 11na10mhzHT20 or 11naHT20 or 11ngHT20 or 11g
	GMODE="$( uci -q get wireless.radio0.chanbw )"
	[ -n "$GMODE" ] && GMODE="${GMODE}mhz"
	GMODE="$( uci -q get wireless.radio0.hwmode )${GMODE}$( uci -q get wireless.radio0.htmode )"
	GMODE="$( _sanitizer run "$GMODE" urlvalue )"

	# show all active ESSID's
	for INDEX in 0 1 2 3; do {
		bool_true "wireless.@wifi-iface[${INDEX}].disabled" || {
			SSID_TEMP="$( uci -q get wireless.@wifi-iface[${INDEX}].ssid )" && {
				bool_true "wireless.@wifi-iface[${INDEX}].hidden" && SSID_TEMP='<hidden>'
				ESSID="${ESSID}${ESSID:+|}$SSID_TEMP"
			}
		}
	} done

	[ -z "$ESSID" ] && {
		pidof 'wpa_supplicant' >/dev/null && {
			# root@box:~ wpa_cli -i wlp2s0 list_networks
			# network id / ssid / bssid / flags
			# 0       eduroam any     [CURRENT]
			explode $( wpa_cli -i "$WIFIDEV" list_networks | grep '\[CURRENT\]'$ )
			ESSID="$2"
		}
	}

	ESSID="$( _sanitizer run "$ESSID" urlvalue )"

	BSSID="$( _sanitizer run "$( _wifi bssid $WIFIDEV )" hex )"

	if [ -e "/etc/HARDWARE" ]; then
		read -r HW <"/etc/HARDWARE"
		HW="$( _sanitizer run "$HW" urlvalue )"
	else
		HW=
	fi

	SSH_PUBKEY_FP="$( _sanitizer run "$( _ssh key_public_fingerprint_get )" hex )"	# 1660559e90efefafd04298c516365bbd12b0ffda
											# (40 bytes HEX [SHA-1])
	FREE_SPACE_FLASH="$( _system flash_free )"
	SERVICES="flash.free.kb:${FREE_SPACE_FLASH}"					# [kByte]

	FREE_SPACE_USB="$( df | grep "/mnt/disc0_." | sed -n "s/^[0-9a-zA-Z\/]*[^0-9]*[0-9]*[^0-9]*[0-9]*[^0-9]*\([0-9]*\).*/\1/p" )"	# fixme! more abstraction!
	if [ -n "$FREE_SPACE_USB" ]; then
		SERVICES="${SERVICES}|usbstorage.free.kb:$(( FREE_SPACE_USB / 1024 ))"	# [kByte]	# howto determine IDE <-> USB.storage?
	else
		_storage usb_installed && {
			SERVICES="${SERVICES}|usbstorage.free.kb:$( _storage size sda kbytes )"
		}
	fi

#	FREE_SPACE_IDE="$( df | grep "/mnt/disc0_." | sed -n "s/^[0-9a-zA-Z\/]*[^0-9]*[0-9]*[^0-9]*[0-9]*[^0-9]*\([0-9]*\).*/\1/p" )"	# fixme!
#	[ -n "$FREE_SPACE_IDE" ] && {
#		SERVICES="${SERVICES}|idestorage.free.kb:$(( FREE_SPACE_IDE / 1024 ))" # [kByte]
#	}

	SERVICES="$( _sanitizer run "$SERVICES" urlvalue )"

											# fixme! add: soundcard, webcam, sambashare, sensorstuff, inetoffer, ...
	FFF_CITY="$( _ipsystem getvar 'FFF_CITY' )"

	_net inet_seems_stable && {
		PUBIP="$( _net get_external_ip )"

		# FIXME! hotfix
		for I in $( _wifi get any mode ap ); do {
			case "$( uci -q get "wireless.@wifi-iface[$I].ssid" )" in
				*'Wartungsmodus'*|*'maintenance'*)
					SSID_HOTFIX='true'
				;;
			esac
		} done

		[ "$SSID_HOTFIX" = 'true' ] && {
			touch '/tmp/wifi_change_essid_ap'
			_log it hotfix daemon alert 'change SSID'
			_wifi change_essid_ap original
		}
	}

	case "${CONFIG_PROFILE}-${HOSTNAME}" in
		preskil*)
			SPEEDTEST_SERVER="202.123.27.113"
		;;
		ejbw_ap-RH*)
			SPEEDTEST_SERVER="192.168.111.242"
		;;
		*)
			SPEEDTEST_SERVER="195.90.7.115"		# speedtest.qsc.de
			SPEEDTEST_SERVER='194.8.194.20'		# netcologne
			SPEEDTEST_SERVER='84.38.67.43'		# intercity-vpn.de
		;;
	esac

	if _sanitizer run "$PUBIP" ip4 check ; then
		read -r PUBIP_OLD 2>/dev/null </tmp/MY_PUBLIC_IP
		echo >/tmp/MY_PUBLIC_IP "$PUBIP"

		case "$( date +%H )" in
			02|05)
				PUBIP_OLD='enforce_recheck'
			;;
		esac

		if [ "$PUBIP" != "$PUBIP_OLD" ]; then
			_log it $funcname daemon info "public IP changed: '$PUBIP_OLD' -> '$PUBIP'"
			ARG1="send_alive_message"

			# renew dyndns: fixme! must be called via hotplug
			[ -n "$( uci -q get network.wan.dyndns )" ] && {
				_curl it "$( uci -q get network.wan.dyndns )" >/dev/null
			}

			INET_INTERFACE="$( _net local_inet_offer )" && {
				# respect maybe new DHCP-values
				_netparam check
				/etc/init.d/S43ethers_fff+ call
				. "$TMPDIR/NETPARAM"

				[ "$INET_INTERFACE" = 'wwan' ] || {
					# FIXME! always uses WANADR, respect e.g. lan-offer
					_speedtest run $WANADR $SPEEDTEST_SERVER poormens_tcpdownload2	'30'
					_speedtest run $WANADR $SPEEDTEST_SERVER poormens_tcpupload	'20'
				}
			}
		else
			_log it $funcname daemon info "[OK] not changed public IP: $PUBIP - no speedcheck, see '/tmp/MY_PUBLIC_IP'"
		fi
	else
		_log it $funcname daemon info "public IP cannot be sanitized to ip4: '$PUBIP'"
		PUBIP=
	fi

	INET_INTERFACE="$( _net local_inet_offer )" && {
		eval $( _speedtest stats $WANADR $SPEEDTEST_SERVER poormens_tcpdownload2 )
		WAN_SPEED_DOWNLOAD="$SPEED_MAX"

		eval $( _speedtest stats $WANADR $SPEEDTEST_SERVER poormens_tcpupload )
		WAN_SPEED_UPLOAD="$SPEED_MAX"

		echo "DOWN:$WAN_SPEED_DOWNLOAD UP:$WAN_SPEED_UPLOAD" >"/tmp/speed_inet_$INET_INTERFACE"
	}

	# _needs gwcheck
	#
	# GWCHECK=1; T=1243685931; DATE=30May2009-14uhr18; GW=10.63.3.1; GATEWAY_HOSTNAME=KG-bittorfwireless-AP;
	# NEXTHOP=10.63.3.1; METRIC=0; ETX=1.00; COST=1.00; COST_INT=0
	# user better vars:
	#
	# GWCHECK_OVERALL_COST_INT="9876"
	# GWCHECK_OVERALL_METRIC="5"
	# GWCHECK_OVERALL_GATEWAY_IP4="10.63.5.1"
	# GWCHECK_OVERALL_GATEWAY_HOST="trierer65"	// really?
	# GWCHECK_NEXTHOP_COST_INT="2876"
	# GWCHECK_NEXTHOP_IP4="10.63.3.1"
	# GWCHECK_NEXTHOP_HOST="bruckner4"		// really?
	# GWCHECK_NEXTHOP_MEDIA="remote/localwifi|lan|wan|pppoe|lan|..."
	#
	# -> GWCHECK="value:value:value:value:value:value:value"

	[ -e /tmp/GATEWAY_CHECK_RECENT ] && {
		GATEWAY=;NEXTHOP=	# needed
		# is: DATE|GATEWAY_HOSTNAME|COST_INT|GATEWAY|NEXTHOP|METRIC
		. /tmp/GATEWAY_CHECK_RECENT

		[ -e '/tmp/GATEWAY_CHECK_RECENT.batman' ] && {
			. /tmp/GATEWAY_CHECK_RECENT.batman
		}
	}

	if [ -e "$TMPDIR/station_signal" ]; then
		read -r SIGNAL <"$TMPDIR/station_signal"
	elif [ -z "$NEXTHOP" ]; then
		SIGNAL=
	elif ip -oneline route get "$NEXTHOP" | grep -Fq 'dev wlan'; then
		# TODO: only measure, if nexthop changes
		DEV="$( _net ip2dev "$NEXTHOP" )"
		MAC="$( _net ip2mac "$NEXTHOP" )"
		SIGNAL="$( _wifi signal_get "$DEV" "$MAC" )"
	else
		SIGNAL=
	fi

	HOP2GW="$METRIC"				# 5
	ETX2GW="$COST_INT"				# 5234 (was 5.234)

	case "$NEXTHOP" in
		'192.168.'*)
			# FIXME! batman?
			GWNODE="$( echo "$NEXTHOP" | cut -d'.' -f3 )"
		;;
		*)
			GWNODE="$( _ipsystem get ${NEXTHOP:-NULL} )"	# 10.63.144.65 -> 400

			[ "$GWNODE" = "$NODENUMBER" -a -z "$INET_INTERFACE" ] && {
				read -r NEXTHOP 2>/dev/null <'/tmp/OLSR/DEFGW_NOW' && {
					GWNODE="$( _ipsystem get ${NEXTHOP:-NULL} )"
				}
			}

			if   [ "$GWNODE" = "$NODENUMBER" -a -z "$INET_INTERFACE" ]; then
				read -r NEXTHOP 2>/dev/null <'/tmp/OLSR/DEFGW_LASTGOOD' && {
					GWNODE="$( _ipsystem get ${NEXTHOP:-NULL} )"
				}
			elif [ -z "$GWNODE" ]; then
				read -r NEXTHOP 2>/dev/null <'/tmp/OLSR/DEFGW_LASTGOOD' && {
					GWNODE="$( _ipsystem get ${NEXTHOP:-NULL} )"
				}
			fi

			[ "$GWNODE" = "$NODENUMBER" -a -z "$INET_INTERFACE" ] && GWNODE=
		;;
	esac

	# only allow,if we do local_inet_offer
	[ "$GWNODE" = "$NODENUMBER" -a -z "$INET_INTERFACE" ] && GWNODE=

	case "$GATEWAY" in
		'192.168.'*)
			# FIXME! batman?
			GW="$( echo "$GATEWAY" | cut -d'.' -f3 )"
		;;
		*)
			GW="$( _ipsystem get ${GATEWAY:-NULL} )"		# 10.63.2.1 -> 2
		;;
	esac

	HOP2GW=${HOP2GW:=NULL}			# todo: ensure, that empty values are rewritten to 'NULL'
	ETX2GW=${ETX2GW:=NULL}
	GW=${GW:=NULL}

	if   [ -z "$WIFIDEV" ]; then
		WIFISCAN=
	elif [ -e '/tmp/WIFISCAN' ]; then
		# do not report on inet_offer - FIXME! till issues are solved
		[ -z "$INET_INTERFACE" ] && {
			WIFISCAN="$( cat '/tmp/WIFISCAN' 2>/dev/null )"
			WIFISCAN="$( _sanitizer run "$WIFISCAN" shellsafe urlvalue )"
		}
	else
		case "$( date +%H )" in			# only at night
			03)
				_wifi scan "$WIFIDEV" >'/tmp/WIFISCAN'
				case " $WIFI_DEVS " in
					*' wlan1 '*)
						_wifi scan "$WIFIDEV" >>'/tmp/WIFISCAN'
					;;
				esac
			;;
		esac
	fi

	only_one_wired_neigh()
	{
		local count="$( echo "$NEIGH" | sed 's/[^-]//g' )"
		test "${#count}" -eq 1
	}

	get_sorted_first_ip()
	{
		local ip1="$1"
		local ip2="$2"

		{
			echo "$ip1"
			echo "$ip2"
		} | sort | head -n1
	}

	if only_one_wired_neigh; then		# fixme! always return a sorted list of all wired neighs

		C="%3a"		# html-code for ':'
		wired_neigh_ip="$( echo "$NEIGH" | sed -n "s/^.*-[0-9]*${C}${LANADR}${C}\([0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\)${C}COST${C}.*/\1/p" )"

		N0="$( get_sorted_first_ip "$LANADR" "$wired_neigh_ip" )"
	else
		N0=
	fi

	# ----- fixme! start_of_ugly_packetfilter_monitoring

grep -q ^"ip_tables " /proc/modules && {


	PFILTER_NAT=0
	for CHAIN in PREROUTING INPUT OUTPUT POSTROUTING; do {
		COUNT=$( $IPT -t nat -nxvL "$CHAIN" | tail -n+3 | grep -Fv 'mark match'| grep -Fvc 'NAT_ALIEN_ROAMERS' )
		PFILTER_NAT=$(( PFILTER_NAT + COUNT ))
	} done
	[ $PFILTER_NAT -eq 0 ] && PFILTER_NAT='noNAT'

	PFILTER_FILTER="$(		$IPT -t filter -nxvL | grep "\--" | sed -n '$=' )"
	PFILTER_MANGLE="$(		$IPT -t mangle -nxvL | grep "\--" | sed -n '$=' )"
	PFILTER_MANGLE_REAL="${PFILTER_MANGLE:=0}"
	PFILTER_MANGLE_USER_REAL=0	# FIXME!
	PFILTER_MANGLE_USER_RESERVE=0
	PFILTER="$( _netfilter user_list | wc -l ):0"

	OLDIFS="$IFS"
	IFS=',:'
	for COUNT in $PFILTER; do {
		PFILTER_MANGLE_REAL=$(( PFILTER_MANGLE_REAL - ${COUNT:-0} ))
	} done
	IFS="$OLDIFS"

	PFILTER="${PFILTER_NAT:-noNAT}:${PFILTER_FILTER:-0}:${PFILTER_MANGLE}:${PFILTER_MANGLE_REAL}:${PFILTER_MANGLE_USER_REAL:-0}:${PFILTER_MANGLE_USER_RESERVE:-0}:${PFILTER}"
	PFILTER="$( _sanitizer run "$PFILTER" urlvalue )"

	[ -e '/tmp/FREE' ] && {
		PFILTER="FREE+$PFILTER"
	}

	[ -e "$PERMDIR/manually_started:firmware_download" ] && {
		PFILTER="FWD+$PFILTER"
	}

	grep -sq "oops" /proc/cmdline || {
		PFILTER="OOPS0+$PFILTER"
	}

	[ -e '/tmp/WATCHDOG_TYPE1' ] && {
		PFILTER="WD-$( cat '/tmp/WATCHDOG_TYPE1' )+$PFILTER"
	}

	# see rrd()
	[ -e "$TMPDIR/station_signal.debug" ] && {
		PFILTER="$PFILTER+$( _sanitizer run "$( cat "$TMPDIR/station_signal.debug" )" urlvalue )"
	}

}
	# ----- end_of_ugly_packetfilter_monitoring, output like: 7:39:600:97:10:12:49,49,49,49,49:13,49,49,49,49,49

	# trying to print at first the values that are not likely to change its length/appearance often
	# just to be better readable in logfile


	DATE_LOCAL_HUMAN="$( date +%d%b%Y-%Huhr%M )"

	if pidof olsrd >/dev/null; then
		olsrrestartcount="$( _olsr uptime restarts_get )"
	else
		olsrrestartcount="off"
	fi

	pidof bat_events >/dev/null && olsrrestartcount="batman+$olsrrestartcount"

	grep -qs "sched: RT throttling activated" "/tmp/dmesg.log" && {
		# seconds from klog, when 'throttling' was detected
		k0="$( grep "sched: RT throttling activated" /tmp/dmesg.log | cut -d'.' -f1 | sed 's/[^0-9]//g' )"
	}

	[ -e "/tmp/dmesg.boot" ] && {
		k1="$( sed -n '$=' "/tmp/dmesg.boot" || k1=0 )"
	}

	[ -e "/tmp/dmesg.log" ] && {
		read -r k2 2>/dev/null <'/tmp/dmesg.counter' || k2=0
		k2=$(( k2 + k1 ))
	}

	k3=0
	for COREDUMP in /www/coredumps/*.core /www/keep/coredumps/*.core; do {
		if [ -s "$COREDUMP" ]; then
			k3=$(( k3 + 1 ))
		else
			[ -e "$COREDUMP" ] && {
				# is 0 byte
				rm "$COREDUMP"
				echo "$COREDUMP" >>'/www/coredumps/old.txt'
			}
		fi
	} done

	[ -s "$COREDUMP" ] || k3=$(( k3 + $( _file lines '/www/coredumps/old.txt' ) - 1 ))

	QUERY=
	QUERY="${QUERY}local=$DATE_LOCAL_HUMAN&mail=$ADMINEMAIL&phone=$ADMINPHONE&time=$TIME&services=$SERVICES&pubkey=$SSH_PUBKEY_FP"
	QUERY="${QUERY}&node=$NODENUMBER&city=$FFF_CITY&mac=$WIFIMAC&hostname=$( _sanitizer run "${HOSTNAME:-emptyhost}" hostname urlvalue )"
	QUERY="${QUERY}&latlon=$LATLON&update=$UPDATE&wifidrv=$DRIVER&olsrver=$OLSRVER"
	QUERY="${QUERY}&olsrrestartcount=${olsrrestartcount}&olsrrestarttime=$( _olsr uptime restart_time )"
	QUERY="${QUERY}&portfw=$( _sanitizer run "$( uci -q get firewall.@portfw[0].portfw )" urlvalue )&optimizenlq=$( uci -q get wireless.@auto_optimize[0].nlq )&optimizeneigh=$( uci -q get wireless.@auto_optimize[0].neigh )"
	QUERY="${QUERY}&txpwr=$TXPWR&wifimode=$WIFIMODE&channel=$CHANNEL&mrate=$MRATE&hw=$HW&frag=$FRAG&rts=$RTS&pfilter=$PFILTER"
	QUERY="${QUERY}&gmodeprot=${GMODEPROT:=0}&gmode=${GMODE:=0}&profile=$CONFIG_PROFILE&noise=$NOISE&rssi=$SIGNAL&distance=$DISTANCE"
	QUERY="${QUERY}&version=$VERSION&reboot=$REBOOT&up=$UPTIME&load=$CPU_LOAD&forwarded=$FORWARDED&essid=$ESSID&bssid=$BSSID"
	QUERY="${QUERY}&gw=$GW&gwnode=$GWNODE&etx2gw=$ETX2GW&hop2gw=$HOP2GW&neigh=$NEIGH&users=$USERS&pubip=$PUBIP&sens=$SENS"
	QUERY="${QUERY}&k0=$k0&k1=$k1&k2=$k2&k3=$k3"
	QUERY="${QUERY}&v1=$( uname -r )"
	QUERY="${QUERY}&v2=$OPENWRT_REV"
	QUERY="${QUERY}&s1=$( _switch show )"
	QUERY="${QUERY}&s2=$( uci -q get dhcp.lan.ignore )"
	QUERY="${QUERY}&h1=$RAM_SIZE"
	QUERY="${QUERY}&h2=$( _system ram_free )"
	QUERY="${QUERY}&r9=$( _system reboot_reason )"

	if [ -e '/sys/block/zram0/num_reads' ]; then
		QUERY="${QUERY}&h4=$( cat /sys/block/zram0/num_reads )"
		QUERY="${QUERY}&h5=$( cat /sys/block/zram0/num_writes )"
		QUERY="${QUERY}&h6=$( cat /sys/block/zram0/mem_used_total )"
		QUERY="${QUERY}&h7=$( cat /sys/block/zram0/compr_data_size )"
	else
		QUERY="${QUERY}&h3=$( _system ram_free )"
	fi

	[ -e "/www/SIMPLE_MESHNODE" ] && {
		QUERY="${QUERY}&h0=1"
	}

	if   [ -e "$DIR_DATABASE/USER/login/rows" ]; then
		QUERY="${QUERY}&d0=$( _db user login list last )"
	elif [ -e '/tmp/USERDB_COPY' ]; then
		QUERY="${QUERY}&d0=$( _file lines '/tmp/USERDB_COPY' )"
	else
		QUERY="${QUERY}&d0=0"
	fi
	QUERY="${QUERY}&d1=$( _weblogin authserver )"

	QUERY="${QUERY}&n0=$N0"

	QUERY="${QUERY}$( _olsr incoming_and_outgoing_olsr_traffic 'cached' )"

	OLSR_SPEED="$( uci -q get olsrd.@Interface[0].speed )"
	[ -z "$OLSR_SPEED" ] && {
		# fallback to old value
		OLSR_SPEED="$( uci -q get olsrd.@meta[0].speedvalue )"
	}

	OLSR_METRIC="$( uci -q get olsrd.@olsrd[0].LinkQualityAlgorithm )"
	QUERY="${QUERY}&t2=${OLSR_SPEED:-5}&t3=$OLSR_METRIC"

	[ -n "$WAN_SPEED_DOWNLOAD" ] && {
		URL_SLASH="%2f"
		QUERY="${QUERY}&i0=$( uci -q get network.wan.proto )"
		QUERY="${QUERY}&i1=${INET_INTERFACE},$( _sanitizer run "$( _net my_isp cached )" urlvalue )"
		QUERY="${QUERY}&i2=${WANADR}${URL_SLASH}${WANPRE}"
		QUERY="${QUERY}&i3=${WAN_SPEED_DOWNLOAD}"
		QUERY="${QUERY}&i4=${WAN_SPEED_UPLOAD}"
		# nexthop IP:
		QUERY="${QUERY}&i5=$( ip route list exact '0.0.0.0/0' table main | sed -n 's/^.* via \([0-9\.]*\) .*/\1/p;q' )"
	}

	[ -e "/tmp/USERDB_COPY.speed" ] && {
		QUERY="${QUERY}&i6=$( cat /tmp/USERDB_COPY.speed )"
	}

	QUERY="${QUERY}&r0=$( _wifi signal_best "$WIFIDEV" )"	# adhoc or ap
	QUERY="${QUERY}&r4=$( _net count_wireless )"
	QUERY="${QUERY}&r5=$( _net count_wired )"

	QUERY="${QUERY}&w0=$WIFIDEV"
	QUERY="${QUERY}&w1=$( cat "/tmp/STATS_WIFI_RESTARTS.$WIFIDEV" 2>/dev/null )"
	QUERY="${QUERY}&w2=$( _wifi phy_uptime "$WIFIDEV" )"

	read -r reason 2>/dev/null <"/tmp/STATS_WIFI_RESTARTS.$WIFIDEV.reason"
	QUERY="${QUERY}&w3=$( _sanitizer run "$reason" urlvalue )"

	usbport_something_is_plugged_in()
	{
		case "$HARDWARE" in
			"Linksys WRT54G/GS/GL"|"Buffalo WHR-HP-G54"|"Dell TrueMobile 2300")
				return 1
			;;
		esac

		test -n "$( grep -s " Driver=" /proc/bus/usb/devices | grep -v 'Driver=hub' )"
	}

	QUERY="${QUERY}&u0=$( usbport_something_is_plugged_in && echo '1' )"

	[ -e "$TMPDIR/builtin_secret_was_send" ] || {
		if SECRET="$( _firmware builtin_secret )"; then
			QUERY="${QUERY}&secret=$SECRET"		# is already HEX
		else
			touch "$TMPDIR/builtin_secret_was_send"
		fi
	}

	[ -n "$( uci -q get dhcp.@dnsmasq[0].dhcpscript )" ] && {
		QUERY="${QUERY}&D0=1"
	}

	# last appending to QUERY
	QUERY="${QUERY}&wifiscan=$WIFISCAN"	# has likely linebreaks FIXME! (issues with archiv?)

	if [ -n "$LOWMEM" ]; then
		echo >"$TMPDIR/ARCHIV_MONITORING" "$QUERY"
	else
		_watch archivsize "$TMPDIR/ARCHIV_MONITORING" 150 lines_max
		echo >>"$TMPDIR/ARCHIV_MONITORING" "$QUERY"
	fi

	[ "$( _math random_integer 1 96 )" -eq 50 ] && ARG1="send_alive_message"	# roundabout each day (15min = 4/h * 24 = 96)
	[ -e '/www/backup_archiv_node_data' ] && ARG1="send_alive_message"
	[ -e "$TMPDIR/SEND_ALIVE_FAILED" ] && {
		rm "$TMPDIR/SEND_ALIVE_FAILED"
		ARG1='send_alive_message'
		ARG2='no_antenna_test'
	}

	KEEP_ALIVE_URL="$( uci -q get system.@monitoring[0].url || echo 'http://intercity-vpn.de/networks/lost' )/meshrdf/"
	_log it $funcname daemon debug "ready: URL: $KEEP_ALIVE_URL"

	[ "$UPTIME" -lt 2 ] && {
		ARG1="send_alive_message"
		ARG2="no_antenna_test"
	}

	if [ -n "$KEEP_ALIVE_URL" ] && [ "$ARG1" = "send_alive_message" -o "$ARG1" = "sam" ]; then
		_log it $funcname daemon info "sending keepalive to: '${KEEP_ALIVE_URL} [...]'"
		[ -z "$ARG2" ] && _log sleep send_alive_jitter "$( _math random_integer 0 60 )" step 10

		_ntp set

		[ -e '/www/backup_archiv_node_data' ] && {			# see _system reboot_safe()
			_log it $funcname daemon info "found node-data backup, including"

			mv "$TMPDIR/ARCHIV_MONITORING" "$TMPDIR/ARCHIV_MONITORING.temp"		# copy backup-file
			mv '/www/backup_archiv_node_data' "$TMPDIR/ARCHIV_MONITORING"		# on top of
			cat "$TMPDIR/ARCHIV_MONITORING.temp" >>"$TMPDIR/ARCHIV_MONITORING"	# normal node_data_file
			rm  "$TMPDIR/ARCHIV_MONITORING.temp"					# and remove backup
		}

		# look for last comment "# alive was send..." in our archive
		# and try to send all lines from this point to end of file
		# to the logging server. After this we set the comment at file-end

		# last comment
		LINENUMBER_LAST_SUCCESS="$( grep -n "^#" "$TMPDIR/ARCHIV_MONITORING" | tail -n1 | cut -d':' -f1 )"
		[ -z "$LINENUMBER_LAST_SUCCESS" ] && {
			# can be also be empty when trash is in file, so better start at the very end
			LINENUMBER_LAST_SUCCESS="$( _file lines "$TMPDIR/ARCHIV_MONITORING" )"
			LINENUMBER_LAST_SUCCESS=$(( LINENUMBER_LAST_SUCCESS - 1 ))
		}
		MAPAPI=

		loop init; while loop max 1024; do {
			# start one line after last comment
			# worst case is line one
			LINENUMBER_LAST_SUCCESS=$(( LINENUMBER_LAST_SUCCESS + 1 ))
			# must be url-encoded:
			QUERY="$( sed "${LINENUMBER_LAST_SUCCESS}q;d" "$TMPDIR/ARCHIV_MONITORING" )"

			case "$QUERY" in
				'local='*|'log='*)
					# http://stackoverflow.com/questions/2659952/maximum-length-of-http-get-request
					# REQUEST="$( I=8000; while let I-=1; do printf 'x'; done )"
					# wget -O - "${KEEP_ALIVE_URL}?log=$REQUEST"
					# check length of QUERY_STRING on server
					[ ${#QUERY} -gt 8000 ] && {
						_log it $funcname daemon info "ignoring long line: '${#QUERY}' bytes"
						continue
					}

					case "$QUERY" in
						'log='*)
 							_log it $funcname daemon debug "send log-message"
							# time=... is appended in log()
 							QUERY="${QUERY}&hostname=$HOSTNAME&mac=$WIFIMAC&rev=$OPENWRT_REV&config=$CONFIG_PROFILE"
 						;;
						*)
							echo "$QUERY" >"$TMPDIR/ARCHIV_MONITORING.recent"
						;;
					esac

					if [ -e "$TMPDIR/ARCHIV_MONITORING.errors" ]; then
						read -r errors_overall <"$TMPDIR/ARCHIV_MONITORING.errors"
					else
						errors_overall=0
					fi

					i=0
					OUT=
					while ! serveranswer_ok "$OUT"; do {
						OUT="$( _curl it "${KEEP_ALIVE_URL}?${QUERY}&e0=$i&e1=$errors_overall" )" || {
							sleep $i
						}

						_watch coredump 'during: monitoring'
						_watch dns_resolution

						i=$(( i + 1 ))
						test $i -lt 10 || break
					} done

					errors_overall=$(( errors_overall + i - 1 ))
					echo "$errors_overall" >"$TMPDIR/ARCHIV_MONITORING.errors"

 					if serveranswer_ok "$OUT"; then
 						_log it $funcname daemon debug "send alive-line: $LINENUMBER_LAST_SUCCESS - $OUT - i: $i"

						case "$QUERY" in
							*'secret='*)
								touch "$TMPDIR/builtin_secret_was_send"
							;;
						esac

						[ -z "$MAPAPI" ] && {
							MAPAPI='send'
							bool_true 'system.@monitoring[0].send_mapapi' && {
								_monitoring heartbeat_mapapi
							}
						}
					else
 						_log it $funcname daemon info "send alive-line: something went wrong at line '$LINENUMBER_LAST_SUCCESS' - ending ('${KEEP_ALIVE_URL}?${QUERY}' -> '$OUT')"

 						# FIXME! this is a workaround for only sending lines, which we have not send yet
						sed -n "$LINENUMBER_LAST_SUCCESS,999p" "$TMPDIR/ARCHIV_MONITORING" >"$TMPDIR/ARCHIV_MONITORING.tmp"
						mv "$TMPDIR/ARCHIV_MONITORING.tmp" "$TMPDIR/ARCHIV_MONITORING"

 						touch "$TMPDIR/SEND_ALIVE_FAILED"
 						echo >>$SCHEDULER "$0"

						# FIXME! set comment ("marker") after last sent line
 						break
 					fi
 				;;
 				*)
					if [ "$MAPAPI" = 'send' ]; then
						_log it $funcname daemon debug "send alive normally ended"
						echo >>"$TMPDIR/ARCHIV_MONITORING" "# alive-message was send @ $DATE_LOCAL_HUMAN (normal exit...)"
					else
						_log it $funcname daemon info "send alive without success"
						echo >>$SCHEDULER '_watch monitoring force'
					fi

 					break
 				;;
			esac
		} done
	fi
else
	_log it $funcname daemon debug "fastmode - no data_collection"
fi
